{
  "errors": [],
  "warnings": [],
  "version": "2.1.0-beta.22",
  "hash": "b5f68b602f8af5e2a771",
  "time": 3969,
  "publicPath": "",
  "assetsByChunkName": {
    "build": "build.js"
  },
  "assets": [
    {
      "name": "build.js",
      "size": 80644,
      "chunks": [
        0
      ],
      "chunkNames": [
        "build"
      ],
      "emitted": true
    }
  ],
  "entrypoints": {
    "build": {
      "chunks": [
        0
      ],
      "assets": [
        "build.js"
      ]
    }
  },
  "chunks": [
    {
      "id": 0,
      "rendered": true,
      "initial": true,
      "entry": true,
      "extraAsync": false,
      "size": 162584,
      "names": [
        "build"
      ],
      "files": [
        "build.js"
      ],
      "hash": "8c222d0914b8a94c97b0",
      "parents": [],
      "origins": [
        {
          "moduleId": 67,
          "module": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "loc": "",
          "name": "build",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": 0,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/apiRequest.js",
      "name": "./src/apiBase/apiRequest.js",
      "index": 14,
      "index2": 12,
      "size": 2352,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 16,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
          "module": "./src/apis/CommentsEndpoint.es6.js",
          "moduleName": "./src/apis/CommentsEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "5:0-47"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PostsEndpoint.js",
          "module": "./src/apis/PostsEndpoint.js",
          "moduleName": "./src/apis/PostsEndpoint.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "5:0-47"
        },
        {
          "moduleId": 40,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/EditUserTextEndpoint.js",
          "module": "./src/apis/EditUserTextEndpoint.js",
          "moduleName": "./src/apis/EditUserTextEndpoint.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "1:0-47"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/MessagesEndpoint.es6.js",
          "module": "./src/apis/MessagesEndpoint.es6.js",
          "moduleName": "./src/apis/MessagesEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "5:0-47"
        },
        {
          "moduleId": 43,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/RecommendedSubreddits.es6.js",
          "module": "./src/apis/RecommendedSubreddits.es6.js",
          "moduleName": "./src/apis/RecommendedSubreddits.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "3:0-47"
        },
        {
          "moduleId": 44,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SimilarPosts.es6.js",
          "module": "./src/apis/SimilarPosts.es6.js",
          "moduleName": "./src/apis/SimilarPosts.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "5:0-47"
        },
        {
          "moduleId": 46,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditsByPost.es6.js",
          "module": "./src/apis/SubredditsByPost.es6.js",
          "moduleName": "./src/apis/SubredditsByPost.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "5:0-47"
        },
        {
          "moduleId": 47,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditsToPostsByPost.es6.js",
          "module": "./src/apis/SubredditsToPostsByPost.es6.js",
          "moduleName": "./src/apis/SubredditsToPostsByPost.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "5:0-47"
        },
        {
          "moduleId": 48,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/accounts.es6.js",
          "module": "./src/apis/accounts.es6.js",
          "moduleName": "./src/apis/accounts.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "3:0-47"
        },
        {
          "moduleId": 50,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/modTools.es6.js",
          "module": "./src/apis/modTools.es6.js",
          "moduleName": "./src/apis/modTools.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/apiRequest",
          "loc": "1:0-47"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/apiRequest",
          "loc": "46:0-46"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport superagent from 'superagent';\n\nimport { APIResponse } from './APIResponse';\nimport ResponseError from './errors/ResponseError';\n\n/* A thin helper function around our apis.\n *\n * @param {Object} apiOptions - fields required to hit our api\n * @param {String} method   - the http method upper or lowercased, e.g. 'GET'\n * @param {String} path     - the endpoint path\n * @param {Object} options  - use to set query params, a body, or request type\n */\nexport default (function (apiOptions, method, path) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _options$query = options.query;\n  var query = _options$query === undefined ? {} : _options$query;\n  var _options$body = options.body;\n  var body = _options$body === undefined ? {} : _options$body;\n  var _options$type = options.type;\n  var type = _options$type === undefined ? null : _options$type;\n  var origin = apiOptions.origin;\n  var appName = apiOptions.appName;\n  var env = apiOptions.env;\n  var token = apiOptions.token;\n  var _apiOptions$headers = apiOptions.headers;\n  var headers = _apiOptions$headers === undefined ? {} : _apiOptions$headers;\n  var _apiOptions$queryPara = apiOptions.queryParams;\n  var queryParams = _apiOptions$queryPara === undefined ? {} : _apiOptions$queryPara;\n\n\n  var _method = method.toLowerCase();\n  var _headers = token ? _extends({}, headers, { Authorization: 'Bearer ' + token }) : headers;\n  var _query = _extends({}, queryParams, query, {\n    app: appName + '-' + env\n  });\n\n  var _path = path.startsWith('/') ? path : '/' + path;\n  var endpoint = '' + origin + _path;\n  var request = superagent[_method](endpoint).set(_headers).query(_query);\n\n  if (type) {\n    request.type(type);\n  }\n\n  if (_method === 'post') {\n    request.send(body);\n  }\n\n  return new Promise(function (resolve, reject) {\n    request.end(function (err, res) {\n      if (!err) {\n        resolve(new APIResponse(res));\n      } else {\n        if (err && err.timeout) {\n          err.status = 504;\n        }\n\n        reject(new ResponseError(err, _path));\n      }\n    });\n  });\n});"
    },
    {
      "id": 1,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/thingTypes.es6.js",
      "name": "./src/models2/thingTypes.es6.js",
      "index": 6,
      "index2": 3,
      "size": 1135,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/PostModel.es6.js",
          "module": "./src/models2/PostModel.es6.js",
          "moduleName": "./src/models2/PostModel.es6.js",
          "type": "harmony import",
          "userRequest": "./thingTypes",
          "loc": "8:0-36"
        },
        {
          "moduleId": 4,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
          "module": "./src/models2/RedditModel.es6.js",
          "moduleName": "./src/models2/RedditModel.es6.js",
          "type": "harmony import",
          "userRequest": "./thingTypes",
          "loc": "15:0-48"
        },
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/CommentModel.es6.js",
          "module": "./src/models2/CommentModel.es6.js",
          "moduleName": "./src/models2/CommentModel.es6.js",
          "type": "harmony import",
          "userRequest": "./thingTypes",
          "loc": "13:0-58"
        },
        {
          "moduleId": 7,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Subreddit.es6.js",
          "module": "./src/models2/Subreddit.es6.js",
          "moduleName": "./src/models2/Subreddit.es6.js",
          "type": "harmony import",
          "userRequest": "./thingTypes",
          "loc": "12:0-41"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIResponse.es6.js",
          "module": "./src/apiBase/APIResponse.es6.js",
          "moduleName": "./src/apiBase/APIResponse.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/thingTypes",
          "loc": "13:0-107"
        },
        {
          "moduleId": 26,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SearchEndpoint.js",
          "module": "./src/apis/SearchEndpoint.js",
          "moduleName": "./src/apis/SearchEndpoint.js",
          "type": "harmony import",
          "userRequest": "../models2/thingTypes",
          "loc": "7:0-50"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Account.es6.js",
          "module": "./src/models2/Account.es6.js",
          "moduleName": "./src/models2/Account.es6.js",
          "type": "harmony import",
          "userRequest": "./thingTypes",
          "loc": "11:0-39"
        },
        {
          "moduleId": 32,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Wiki.es6.js",
          "module": "./src/models2/Wiki.es6.js",
          "moduleName": "./src/models2/Wiki.es6.js",
          "type": "harmony import",
          "userRequest": "./thingTypes",
          "loc": "12:0-36"
        },
        {
          "moduleId": 55,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SearchQuery.es6.js",
          "module": "./src/collections/SearchQuery.es6.js",
          "moduleName": "./src/collections/SearchQuery.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/thingTypes",
          "loc": "18:0-56"
        },
        {
          "moduleId": 59,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/lib/commentTreeUtils.es6.js",
          "module": "./src/lib/commentTreeUtils.es6.js",
          "moduleName": "./src/lib/commentTreeUtils.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/thingTypes",
          "loc": "1:0-58"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./models2/thingTypes",
          "loc": "45:0-51"
        }
      ],
      "usedExports": true,
      "providedExports": [
        "COMMENT",
        "COMMENT_TYPE",
        "COMMENT_LOAD_MORE",
        "ACCOUNT",
        "ACCOUNT_TYPE",
        "POST",
        "POST_TYPE",
        "MESSAGE",
        "MESSAGE_TYPE",
        "SUBREDDIT",
        "SUBREDDIT_TYPE",
        "TROPHIE",
        "TROPHIE_TYPE",
        "PROMOCAMPAIGN",
        "PROMOCAMPAIGN_TYPE",
        "WIKI",
        "WIKI_TYPE",
        "TYPES",
        "TYPE_TO_THING_TYPE",
        "thingType"
      ],
      "source": "export var COMMENT = 'comment';\nexport var COMMENT_TYPE = 't1';\nexport var COMMENT_LOAD_MORE = 'comment_load_more';\n\nexport var ACCOUNT = 'account';\nexport var ACCOUNT_TYPE = 't2';\n\nexport var POST = 'post';\nexport var POST_TYPE = 't3';\n\nexport var MESSAGE = 'message';\nexport var MESSAGE_TYPE = 't4';\n\nexport var SUBREDDIT = 'subreddit';\nexport var SUBREDDIT_TYPE = 't5';\n\nexport var TROPHIE = 'trophie';\nexport var TROPHIE_TYPE = 't6';\n\nexport var PROMOCAMPAIGN = 'promocampaign';\nexport var PROMOCAMPAIGN_TYPE = 't8';\n\n// Honorary things\nexport var WIKI = 'wiki';\nexport var WIKI_TYPE = 'wiki';\n\nvar type_pairs = [[COMMENT, COMMENT_TYPE], [ACCOUNT, ACCOUNT_TYPE], [POST, POST_TYPE], [MESSAGE, MESSAGE_TYPE], [SUBREDDIT, SUBREDDIT_TYPE], [TROPHIE, TROPHIE_TYPE], [PROMOCAMPAIGN, PROMOCAMPAIGN_TYPE], [WIKI, WIKI_TYPE]];\n\nexport var TYPES = type_pairs.reduce(function (table, pair) {\n  table[pair[1]] = pair[0];\n  return table;\n}, {});\n\nexport var TYPE_TO_THING_TYPE = type_pairs.reduce(function (table, pair) {\n  table[pair[0]] = pair[1];\n  return table;\n}, {});\n\nexport function thingType(id) {\n  return TYPES[id.substring(0, 2)];\n}"
    },
    {
      "id": 2,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
      "name": "./src/apiBase/APIRequestUtils.es6.js",
      "index": 1,
      "index2": 10,
      "size": 6153,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 26,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SearchEndpoint.js",
          "module": "./src/apis/SearchEndpoint.js",
          "moduleName": "./src/apis/SearchEndpoint.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "3:0-54"
        },
        {
          "moduleId": 27,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditEndpoint.es6.js",
          "module": "./src/apis/SubredditEndpoint.es6.js",
          "moduleName": "./src/apis/SubredditEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "6:0-68"
        },
        {
          "moduleId": 28,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/subscriptions.es6.js",
          "module": "./src/apis/subscriptions.es6.js",
          "moduleName": "./src/apis/subscriptions.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "1:0-68"
        },
        {
          "moduleId": 34,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedAndHiddenCommon.es6.js",
          "module": "./src/apis/SavedAndHiddenCommon.es6.js",
          "moduleName": "./src/apis/SavedAndHiddenCommon.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "4:0-68"
        },
        {
          "moduleId": 42,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PreferencesEndpoint.es6.js",
          "module": "./src/apis/PreferencesEndpoint.es6.js",
          "moduleName": "./src/apis/PreferencesEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "7:0-63"
        },
        {
          "moduleId": 45,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditAutocomplete.es6.js",
          "module": "./src/apis/SubredditAutocomplete.es6.js",
          "moduleName": "./src/apis/SubredditAutocomplete.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "1:0-53"
        },
        {
          "moduleId": 49,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/activities.es6.js",
          "module": "./src/apis/activities.es6.js",
          "moduleName": "./src/apis/activities.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "3:0-54"
        },
        {
          "moduleId": 51,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/wikis.es6.js",
          "module": "./src/apis/wikis.es6.js",
          "moduleName": "./src/apis/wikis.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "3:0-54"
        },
        {
          "moduleId": 58,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/VoteEndpoint.es6.js",
          "module": "./src/apis/VoteEndpoint.es6.js",
          "moduleName": "./src/apis/VoteEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIRequestUtils",
          "loc": "1:0-67"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/APIRequestUtils",
          "loc": "3:0-65"
        }
      ],
      "usedExports": [
        "validateData",
        "runForm",
        "runQuery",
        "runJson",
        "makeOptions",
        "rawSend"
      ],
      "providedExports": [
        "makeOptions",
        "rawSend",
        "validateData",
        "runJson",
        "runForm",
        "runQuery"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport superagent from 'superagent';\n\nimport Events from './Events';\nimport { APIResponse } from './APIResponse';\nimport NoModelError from './errors/NoModelError';\nimport ResponseError from './errors/ResponseError';\nimport ValidationError from './errors/ValidationError';\n\nvar EventEmitterShim = {\n  emit: function emit() {},\n  on: function on() {},\n  off: function off() {}\n};\n\nvar DefaultOptions = {\n  userAgent: 'snoodev3',\n  origin: 'https://www.reddit.com',\n  appName: 'node-api-client-v3',\n  env: 'develop',\n  token: '',\n  timeout: 5000,\n  eventEmitter: EventEmitterShim\n};\n\nexport var makeOptions = function makeOptions() {\n  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  return _extends({}, DefaultOptions, overrides);\n};\n\nvar getEmitter = function getEmitter(apiOptions) {\n  return apiOptions.eventEmitter || EventEmitterShim;\n};\n\nvar requestAuthHeader = function requestAuthHeader(apiOptions) {\n  var token = apiOptions.token;\n  if (!token) {\n    return {};\n  }\n  return { Authorization: 'Bearer ' + token };\n};\n\nvar requestHeaders = function requestHeaders(apiOptions) {\n  var authHeaders = requestAuthHeader(apiOptions);\n  return _extends({}, apiOptions.headers || {}, authHeaders);\n};\n\nvar requestPath = function requestPath(apiOptions, path) {\n  var slash = '/';\n\n  if (path.indexOf('/') === 0) {\n    slash = '';\n  }\n\n  return '' + apiOptions.origin + slash + path;\n};\n\nvar appParameter = function appParameter(apiOptions) {\n  return apiOptions.appName + '-' + apiOptions.env;\n};\n\n// DEPRECATED: use apiRequest instead\nexport var rawSend = function rawSend(apiOptions, method, path, data, type, cb) {\n  var origin = apiOptions.origin;\n  var url = requestPath(apiOptions, path);\n\n  var fakeReq = {\n    origin: origin,\n    path: path,\n    url: url,\n    method: method,\n    query: _extends({}, data)\n  };\n\n  getEmitter(apiOptions).emit(Events.request, fakeReq);\n  var s = superagent[method](url);\n  s.set(requestHeaders(apiOptions));\n\n  if (type === 'query') {\n    data.app = appParameter(apiOptions);\n    s.query(_extends({}, apiOptions.queryParams || {}, data, {\n      app: appParameter(apiOptions)\n    }));\n\n    if (s.redirects) {\n      s.redirects(0);\n    }\n  } else {\n    s.query({ app: appParameter(apiOptions) });\n    s.type(type);\n    s.send(data);\n  }\n\n  s.end(function (err, res) {\n    // handle super agent inconsistencies\n    var req = res ? res.request : fakeReq;\n    cb(err, res, req);\n  });\n};\n\nexport var validateData = function validateData(data, method, apiName, validator) {\n  if (!(data && validator)) {\n    throw new ValidationError(apiName, undefined);\n  }\n  if (!validator(data)) {\n    throw new ValidationError(apiName, data);\n  }\n};\n\n// DEPRECATED: use apiRequest instead\nexport var runJson = function runJson(apiOptions, method, path, data, parseBody, parseMeta) {\n  if (!(apiOptions && method && path && data)) {\n    throw new NoModelError();\n  }\n\n  return new Promise(function (resolve, reject) {\n    rawSend(apiOptions, method, path, data, 'json', function (err, res, req) {\n      handle(apiOptions, resolve, reject, err, res, req, method, path, data, parseBody, parseMeta);\n    });\n  });\n};\n\n// DEPRECATED: use apiRequest instead\nexport var runForm = function runForm(apiOptions, method, path, data, parseBody, parseMeta) {\n  if (!(apiOptions && method && path && data)) {\n    throw new NoModelError();\n  }\n\n  return new Promise(function (resolve, reject) {\n    rawSend(apiOptions, method, path, data, 'form', function (err, res, req) {\n      handle(apiOptions, resolve, reject, err, res, req, method, path, data, parseBody, parseMeta);\n    });\n  });\n};\n\n// DEPRECATED: use apiRequest instead\nexport var runQuery = function runQuery(apiOptions, method, path, query, rawQuery, parseBody, parseMeta) {\n  if (!(apiOptions && method && path && query && rawQuery)) {\n    throw new NoModelError();\n  }\n\n  if (method === 'get') {\n    query.raw_json = 1;\n  }\n\n  return new Promise(function (resolve, reject) {\n    rawSend(apiOptions, method, path, query, 'query', function (err, res, req) {\n      handle(apiOptions, resolve, reject, err, res, req, method, path, rawQuery, parseBody, parseMeta);\n    });\n  });\n};\n\nvar normalizeRequest = function normalizeRequest(res, req) {\n  if (res && !req) {\n    return res.request || res.req;\n  }\n\n  return req;\n};\n\nvar handle = function handle(apiOptions, resolve, reject, err, res, req, method, path, query, parseBody, parseMeta) {\n\n  req = normalizeRequest(res, req);\n\n  if (handleRequestIfFailed(apiOptions, err, res, req, method, path, reject)) {\n    return;\n  }\n\n  getEmitter(apiOptions).emit(Events.response, req, res);\n\n  var apiResponse = tryParseResponse(reject, res, req, method, path, query, parseBody, parseMeta);\n\n  getEmitter(apiOptions).emit(Events.result, apiResponse);\n  resolve(apiResponse);\n};\n\nvar handleRequestIfFailed = function handleRequestIfFailed(apiOptions, err, res, req, method, path, reject) {\n  if (!err && !res || res && res.ok) {\n    return;\n  }\n\n  if (err) {\n    getEmitter(apiOptions).emit(Events.error, err, req);\n\n    if (err && err.timeout) {\n      err.status = 504;\n    }\n\n    return reject(new ResponseError(err, path));\n  }\n\n  // otherwise there's res and res.ok === false\n  return reject(new ResponseError(res, path));\n};\n\nvar tryParseResponse = function tryParseResponse(reject, res, req, method, path, query, parseBody, parseMeta) {\n  try {\n    return makeApiResponse(res, req, method, query, parseBody, parseMeta);\n  } catch (e) {\n    console.trace(e);\n    reject(new ResponseError(e, path));\n  }\n};\n\nvar makeApiResponse = function makeApiResponse(res, req, method, query, parseBody, parseMeta) {\n  if (!parseBody) {\n    return res.body;\n  }\n  var meta = parseMeta ? parseMeta(res, req, method) : res.headers;\n  var apiResponse = new APIResponse(res, meta, query);\n  parseBody(res, apiResponse, req, method);\n  return apiResponse;\n};"
    },
    {
      "id": 3,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/PostModel.es6.js",
      "name": "./src/models2/PostModel.es6.js",
      "index": 30,
      "index2": 29,
      "size": 5864,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 16,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
          "module": "./src/apis/CommentsEndpoint.es6.js",
          "moduleName": "./src/apis/CommentsEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "8:0-45"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PostsEndpoint.js",
          "module": "./src/apis/PostsEndpoint.js",
          "moduleName": "./src/apis/PostsEndpoint.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "8:0-45"
        },
        {
          "moduleId": 26,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SearchEndpoint.js",
          "module": "./src/apis/SearchEndpoint.js",
          "moduleName": "./src/apis/SearchEndpoint.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "5:0-45"
        },
        {
          "moduleId": 34,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedAndHiddenCommon.es6.js",
          "module": "./src/apis/SavedAndHiddenCommon.es6.js",
          "moduleName": "./src/apis/SavedAndHiddenCommon.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "6:0-45"
        },
        {
          "moduleId": 40,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/EditUserTextEndpoint.js",
          "module": "./src/apis/EditUserTextEndpoint.js",
          "moduleName": "./src/apis/EditUserTextEndpoint.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "5:0-45"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/MessagesEndpoint.es6.js",
          "module": "./src/apis/MessagesEndpoint.es6.js",
          "moduleName": "./src/apis/MessagesEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "9:0-40"
        },
        {
          "moduleId": 44,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SimilarPosts.es6.js",
          "module": "./src/apis/SimilarPosts.es6.js",
          "moduleName": "./src/apis/SimilarPosts.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "6:0-45"
        },
        {
          "moduleId": 47,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditsToPostsByPost.es6.js",
          "module": "./src/apis/SubredditsToPostsByPost.es6.js",
          "moduleName": "./src/apis/SubredditsToPostsByPost.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "6:0-45"
        },
        {
          "moduleId": 49,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/activities.es6.js",
          "module": "./src/apis/activities.es6.js",
          "moduleName": "./src/apis/activities.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/PostModel",
          "loc": "6:0-45"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./models2/PostModel",
          "loc": "129:0-44"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport RedditModel from './RedditModel';\nimport { POST } from './thingTypes';\nimport votable from './mixins/votable';\nimport replyable from './mixins/replyable';\n\nvar T = RedditModel.Types;\n\nvar IGNORED_THUMBNAILS = new Set(['default', 'image', 'self', 'nsfw', 'spoiler']);\nvar cleanThumbnail = function cleanThumbnail(thumbnail) {\n  return IGNORED_THUMBNAILS.has(thumbnail) ? '' : thumbnail;\n};\n\nvar PostModel = function (_RedditModel) {\n  _inherits(PostModel, _RedditModel);\n\n  function PostModel() {\n    _classCallCheck(this, PostModel);\n\n    return _possibleConstructorReturn(this, (PostModel.__proto__ || Object.getPrototypeOf(PostModel)).apply(this, arguments));\n  }\n\n  return PostModel;\n}(RedditModel);\n\nPostModel.type = POST;\nPostModel.PROPERTIES = {\n  adserverImpPixel: T.string,\n  archived: T.bool,\n  author: T.string,\n  cleanPermalink: T.link,\n  cleanUrl: T.link,\n  distinguished: T.string,\n  domain: T.string,\n  downs: T.number,\n  gilded: T.number,\n  hidden: T.bool,\n  id: T.string,\n  impPixel: T.string,\n  likes: T.likes,\n  locked: T.bool,\n  malink: T.link,\n  media: T.nop,\n  name: T.string,\n  over18: T.bool,\n  postHint: T.string,\n  promoted: T.bool,\n  quarantine: T.bool,\n  saved: T.bool,\n  score: T.number,\n  spoiler: T.bool,\n  stickied: T.bool,\n  subreddit: T.string,\n  subredditDetail: T.nop,\n  subredditId: T.string,\n  thumbnail: T.string,\n  title: T.string,\n  ups: T.number,\n  removed: T.bool,\n  approved: T.bool,\n  spam: T.bool,\n\n  // aliases\n  approvedBy: T.string,\n  authorFlairCSSClass: T.string,\n  authorFlairText: T.string,\n  bannedBy: T.string,\n  createdUTC: T.number,\n  disableComments: T.bool,\n  hideScore: T.bool,\n  isSelf: T.bool,\n  isBlankAd: T.bool,\n  linkFlairCSSClass: T.string,\n  linkFlairText: T.string,\n  mediaOembed: T.nop,\n  modReports: T.array,\n  numComments: T.number,\n  originalLink: T.string,\n  outboundLink: T.nop,\n  promotedBy: T.string,\n  promotedDisplayName: T.string,\n  promotedUrl: T.string,\n  secureMedia: T.nop,\n  selfTextHTML: T.string, // html version for display\n  selfTextMD: T.string, // markdown version for editing\n  sendReplies: T.bool,\n  suggestedSort: T.string,\n  thirdPartyTracking: T.string,\n  thirdPartyTracking2: T.string,\n  userReports: T.array,\n\n  // derived\n  expandable: T.bool,\n  expandedContent: T.html,\n  preview: T.nop };\nPostModel.API_ALIASES = {\n  adserver_imp_pixel: 'adserverImpPixel',\n  approved_by: 'approvedBy',\n  author_flair_css_class: 'authorFlairCSSClass',\n  author_flair_text: 'authorFlairText',\n  banned_by: 'bannedBy',\n  created_utc: 'createdUTC',\n  disable_comments: 'disableComments',\n  hide_score: 'hideScore',\n  imp_pixel: 'impPixel',\n  is_self: 'isSelf',\n  is_blank_ad: 'isBlankAd',\n  link_flair_css_class: 'linkFlairCSSClass',\n  link_flair_text: 'linkFlairText',\n  media_oembed: 'mediaOembed',\n  mod_reports: 'modReports',\n  num_comments: 'numComments',\n  original_link: 'originalLink',\n  over_18: 'over18',\n  outbound_link: 'outboundLink',\n  permalink: 'cleanPermalink',\n  promoted_by: 'promotedBy',\n  promoted_display_name: 'promotedDisplayName',\n  promoted_url: 'promotedUrl',\n  post_hint: 'postHint',\n  secure_media: 'secureMedia',\n  selftext: 'selfTextMD',\n  selftext_html: 'selfTextHTML',\n  suggested_sort: 'suggestedSort',\n  sr_detail: 'subredditDetail',\n  subreddit_id: 'subredditId',\n  sendreplies: 'sendReplies',\n  third_party_tracking: 'thirdPartyTracking',\n  third_party_tracking_2: 'thirdPartyTracking2',\n  url: 'cleanUrl',\n  user_reports: 'userReports'\n};\nPostModel.DERIVED_PROPERTIES = {\n  expandable: function expandable(data) {\n    if (data.expandable) {\n      return data.expandable;\n    }\n\n    // If it has secure_media, or media, or selftext, it has expandable.\n    return !!(data.secure_media && data.secure_media.content || data.media_embed && data.media_embed.content || data.selftext_html);\n  },\n  expandedContent: function expandedContent(data) {\n    if (data.expandedContent) {\n      return data.expandedContent;\n    }\n\n    var content = void 0;\n\n    content = data.secure_media_embed && data.secure_media_embed.content || data.media_embed && data.media_embed.content;\n\n    if (!content && data.selftext_html) {\n      content = data.selftext_html;\n    }\n\n    return content;\n  },\n  preview: function preview(data) {\n    if (!data.promoted || data.preview) {\n      return data.preview;\n    }\n\n    // we build fake preview data for ads and normal thumbnails\n    var resolutions = [];\n\n    if (data.mobile_ad_url) {\n      resolutions.push({\n        url: data.mobile_ad_url,\n        height: 628,\n        width: 1200\n      });\n    }\n\n    var thumbnail = cleanThumbnail(data.thumbnail);\n    if (thumbnail) {\n      resolutions.push({\n        url: thumbnail,\n        height: 140,\n        width: 140\n      });\n    }\n\n    return {\n      images: [{\n        resolutions: resolutions\n      }]\n    };\n  },\n  thumbnail: function thumbnail(data) {\n    return cleanThumbnail(data.thumbnail);\n  }\n};\nexport default PostModel;\n\n\nvotable(PostModel);\nreplyable(PostModel);"
    },
    {
      "id": 4,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
      "name": "./src/models2/RedditModel.es6.js",
      "index": 18,
      "index2": 22,
      "size": 4340,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Account.es6.js",
      "issuerId": 30,
      "issuerName": "./src/models2/Account.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/PostModel.es6.js",
          "module": "./src/models2/PostModel.es6.js",
          "moduleName": "./src/models2/PostModel.es6.js",
          "type": "harmony import",
          "userRequest": "./RedditModel",
          "loc": "7:0-40"
        },
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/CommentModel.es6.js",
          "module": "./src/models2/CommentModel.es6.js",
          "moduleName": "./src/models2/CommentModel.es6.js",
          "type": "harmony import",
          "userRequest": "./RedditModel",
          "loc": "11:0-40"
        },
        {
          "moduleId": 7,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Subreddit.es6.js",
          "module": "./src/models2/Subreddit.es6.js",
          "moduleName": "./src/models2/Subreddit.es6.js",
          "type": "harmony import",
          "userRequest": "./RedditModel",
          "loc": "11:0-40"
        },
        {
          "moduleId": 30,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Account.es6.js",
          "module": "./src/models2/Account.es6.js",
          "moduleName": "./src/models2/Account.es6.js",
          "type": "harmony import",
          "userRequest": "./RedditModel",
          "loc": "9:0-40"
        },
        {
          "moduleId": 31,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Preferences.es6.js",
          "module": "./src/models2/Preferences.es6.js",
          "moduleName": "./src/models2/Preferences.es6.js",
          "type": "harmony import",
          "userRequest": "./RedditModel",
          "loc": "9:0-40"
        },
        {
          "moduleId": 32,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Wiki.es6.js",
          "module": "./src/models2/Wiki.es6.js",
          "moduleName": "./src/models2/Wiki.es6.js",
          "type": "harmony import",
          "userRequest": "./RedditModel",
          "loc": "9:0-40"
        },
        {
          "moduleId": 63,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/MessageModel.es6.js",
          "module": "./src/models2/MessageModel.es6.js",
          "moduleName": "./src/models2/MessageModel.es6.js",
          "type": "harmony import",
          "userRequest": "./RedditModel",
          "loc": "7:0-40"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport Model from '../apiBase/Model';\n\nimport { TYPES, thingType } from './thingTypes';\n\nimport isThingID from '../lib/isThingID';\nimport process from '../lib/markdown';\nimport unredditifyLink from '../lib/unredditifyLink';\n\nimport mockHTML from './mockgenerators/mockHTML';\nimport mockLink from './mockgenerators/mockLink';\n\n// TYPES I'd like to add\n// mod: (type) => type\n// useage: bannedBy: T.mod(T.string),\n// purpose: Just to document that a field is only going to be there as a moderator\n//\n// record: val => val instanceOf Record ? val : new Record()\n// usage: replies: T.arrayOf(T.record)\n// purpose: Enforce that model relations are defined as records\n//\n// model: ModelClass => val => ModelClass.fromJSON(val)\n// usage: srDetail: T.model(SubredditDetailModel)\n// purpose: express nested model parsing for one off nested parts of your model\n\nvar RedditModel = function (_Model) {\n  _inherits(RedditModel, _Model);\n\n  function RedditModel() {\n    _classCallCheck(this, RedditModel);\n\n    return _possibleConstructorReturn(this, (RedditModel.__proto__ || Object.getPrototypeOf(RedditModel)).apply(this, arguments));\n  }\n\n  _createClass(RedditModel, [{\n    key: 'makeUUID',\n    value: function makeUUID(data) {\n      if (isThingID(data.name)) {\n        return data.name;\n      }\n      if (isThingID(data.id)) {\n        return data.id;\n      }\n      return _get(RedditModel.prototype.__proto__ || Object.getPrototypeOf(RedditModel.prototype), 'makeUUID', this).call(this, data);\n    }\n  }, {\n    key: 'getType',\n    value: function getType(data, uuid) {\n      return _get(RedditModel.prototype.__proto__ || Object.getPrototypeOf(RedditModel.prototype), 'getType', this).call(this, data, uuid) || TYPES[data.kind] || thingType(uuid) || 'Unknown';\n    }\n  }]);\n\n  return RedditModel;\n}(Model);\n\nRedditModel.Types = _extends({}, Model.Types, {\n  html: function html(val) {\n    return Model.Types.string(val);\n  },\n  link: function link(val) {\n    return unredditifyLink(Model.Types.string(val));\n  }\n});\nRedditModel.MockTypes = _extends({}, Model.MockTypes, {\n  html: mockHTML,\n  link: mockLink\n});\nexport default RedditModel;"
    },
    {
      "id": 5,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/CommentModel.es6.js",
      "name": "./src/models2/CommentModel.es6.js",
      "index": 17,
      "index2": 28,
      "size": 5566,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 16,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
          "module": "./src/apis/CommentsEndpoint.es6.js",
          "moduleName": "./src/apis/CommentsEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/CommentModel",
          "loc": "7:0-51"
        },
        {
          "moduleId": 34,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedAndHiddenCommon.es6.js",
          "module": "./src/apis/SavedAndHiddenCommon.es6.js",
          "moduleName": "./src/apis/SavedAndHiddenCommon.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/CommentModel",
          "loc": "5:0-51"
        },
        {
          "moduleId": 40,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/EditUserTextEndpoint.js",
          "module": "./src/apis/EditUserTextEndpoint.js",
          "moduleName": "./src/apis/EditUserTextEndpoint.js",
          "type": "harmony import",
          "userRequest": "../models2/CommentModel",
          "loc": "6:0-51"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/MessagesEndpoint.es6.js",
          "module": "./src/apis/MessagesEndpoint.es6.js",
          "moduleName": "./src/apis/MessagesEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/CommentModel",
          "loc": "8:0-46"
        },
        {
          "moduleId": 49,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/activities.es6.js",
          "module": "./src/apis/activities.es6.js",
          "moduleName": "./src/apis/activities.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/CommentModel",
          "loc": "5:0-51"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./models2/CommentModel",
          "loc": "128:0-50"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport RedditModel from './RedditModel';\nimport Record from '../apiBase/Record';\nimport { COMMENT, COMMENT_LOAD_MORE } from './thingTypes';\n\nimport votable from './mixins/votable';\nimport replyable from './mixins/replyable';\n\nvar T = RedditModel.Types;\n\nvar CommentModel = function (_RedditModel) {\n  _inherits(CommentModel, _RedditModel);\n\n  function CommentModel() {\n    _classCallCheck(this, CommentModel);\n\n    return _possibleConstructorReturn(this, (CommentModel.__proto__ || Object.getPrototypeOf(CommentModel)).apply(this, arguments));\n  }\n\n  _createClass(CommentModel, [{\n    key: 'makeUUID',\n    value: function makeUUID(data) {\n      if (data.name === 't1__' && data.parent_id) {\n        // This is a stub for load more, parentId is needed to fetch more\n        return data.parent_id;\n      }\n\n      return data.name;\n    }\n  }, {\n    key: 'toRecord',\n    value: function toRecord() {\n      if (this.uuid === this.name) {\n        return _get(CommentModel.prototype.__proto__ || Object.getPrototypeOf(CommentModel.prototype), 'toRecord', this).call(this);\n      }\n\n      // otherwise its a load more stub for super nested comments\n      return new Record(COMMENT_LOAD_MORE, this.parentId);\n    }\n  }]);\n\n  return CommentModel;\n}(RedditModel);\n\nCommentModel.type = COMMENT;\nCommentModel.PROPERTIES = {\n  archived: T.bool,\n  author: T.string,\n  authorFlairCSSClass: T.string,\n  authorFlairText: T.string,\n  children: T.nop,\n  controversiality: T.number,\n  distinguished: T.string,\n  downs: T.number,\n  edited: T.bool,\n  gilded: T.number,\n  id: T.string,\n  likes: T.likes,\n  name: T.string,\n  replies: T.array,\n  numReplies: T.number,\n  loadMore: T.bool,\n  loadMoreIds: T.arrayOf(T.string),\n  saved: T.bool,\n  score: T.number,\n  stickied: T.bool,\n  subreddit: T.string,\n  ups: T.number,\n  removed: T.bool,\n  approved: T.bool,\n  spam: T.bool,\n\n  // aliases\n  approvedBy: T.string,\n  bannedBy: T.string,\n  bodyHTML: T.html,\n  bodyMD: T.html,\n  createdUTC: T.number,\n  linkId: T.string,\n  linkTitle: T.string,\n  modReports: T.array,\n  numReports: T.number,\n  parentId: T.string,\n  reportReasons: T.array,\n  scoreHidden: T.bool,\n  subredditId: T.string,\n  userReports: T.array,\n\n  // derived\n  cleanPermalink: T.link,\n  canContinueThread: T.bool\n};\nCommentModel.API_ALIASES = {\n  approved_by: 'approvedBy',\n  author_flair_css_class: 'authorFlairCSSClass',\n  author_flair_text: 'authorFlairText',\n  banned_by: 'bannedBy',\n  body_html: 'bodyHTML',\n  body: 'bodyMD',\n  created_utc: 'createdUTC',\n  link_id: 'linkId',\n  link_title: 'linkTitle',\n  mod_reports: 'modReports',\n  num_reports: 'numReports',\n  parent_id: 'parentId',\n  report_reasons: 'reportReasons',\n  score_hidden: 'scoreHidden',\n  subreddit_id: 'subredditId',\n  user_reports: 'userReports'\n};\nCommentModel.DERIVED_PROPERTIES = {\n  cleanPermalink: function cleanPermalink(data) {\n    // if we are re-instantiating for a stub (read when we vote or reply)\n    // re-use the cleanPermalink we parsed before.\n    if (data.cleanPermalink) {\n      return data.cleanPermalink;\n    }\n\n    var subreddit = data.subreddit;\n    var link_id = data.link_id;\n    var id = data.id;\n    var context = data.context;\n\n\n    if (context) {\n      return context;\n    }\n\n    return '/r/' + subreddit + '/comments/' + link_id.substr(3) + '/comment/' + id;\n  },\n  canContinueThread: function canContinueThread(data) {\n    // We derive this property to make the logic for rendering loadMore and\n    // continue thread more explicit\n    return data.loadMore && data.loadMoreIds.length === 0;\n  }\n};\nexport default CommentModel;\n\n\nvotable(CommentModel);\nreplyable(CommentModel);"
    },
    {
      "id": 6,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/ValidationError.js",
      "name": "./src/apiBase/errors/ValidationError.js",
      "index": 11,
      "index2": 9,
      "size": 1664,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 2,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
          "module": "./src/apiBase/APIRequestUtils.es6.js",
          "moduleName": "./src/apiBase/APIRequestUtils.es6.js",
          "type": "harmony import",
          "userRequest": "./errors/ValidationError",
          "loc": "9:0-55"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PostsEndpoint.js",
          "module": "./src/apis/PostsEndpoint.js",
          "moduleName": "./src/apis/PostsEndpoint.js",
          "type": "harmony import",
          "userRequest": "../apiBase/errors/ValidationError",
          "loc": "7:0-64"
        },
        {
          "moduleId": 40,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/EditUserTextEndpoint.js",
          "module": "./src/apis/EditUserTextEndpoint.js",
          "moduleName": "./src/apis/EditUserTextEndpoint.js",
          "type": "harmony import",
          "userRequest": "../apiBase/errors/ValidationError",
          "loc": "3:0-64"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/MessagesEndpoint.es6.js",
          "module": "./src/apis/MessagesEndpoint.es6.js",
          "moduleName": "./src/apis/MessagesEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/errors/ValidationError",
          "loc": "6:0-64"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/errors/ValidationError",
          "loc": "99:0-63"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport FakeError from './FakeError';\n\nvar msgText = function msgText(api, errors) {\n  return api + ' had errors in ' + errors.join(',');\n};\n\nvar ValidationError = function (_FakeError) {\n  _inherits(ValidationError, _FakeError);\n\n  function ValidationError(apiName, errors, status) {\n    _classCallCheck(this, ValidationError);\n\n    var message = errors && errors.length ? msgText(apiName, errors) : 'Validation error in \\'' + apiName + '\\'';\n\n    var _this = _possibleConstructorReturn(this, (ValidationError.__proto__ || Object.getPrototypeOf(ValidationError)).call(this, message));\n\n    _this.name = 'ValidationError';\n    _this.errors = errors;\n    _this.status = status;\n    return _this;\n  }\n\n  return ValidationError;\n}(FakeError);\n\nexport default ValidationError;"
    },
    {
      "id": 7,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Subreddit.es6.js",
      "name": "./src/models2/Subreddit.es6.js",
      "index": 46,
      "index2": 45,
      "size": 7512,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 26,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SearchEndpoint.js",
          "module": "./src/apis/SearchEndpoint.js",
          "moduleName": "./src/apis/SearchEndpoint.js",
          "type": "harmony import",
          "userRequest": "../models2/Subreddit",
          "loc": "6:0-45"
        },
        {
          "moduleId": 27,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditEndpoint.es6.js",
          "module": "./src/apis/SubredditEndpoint.es6.js",
          "moduleName": "./src/apis/SubredditEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/Subreddit",
          "loc": "7:0-45"
        },
        {
          "moduleId": 43,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/RecommendedSubreddits.es6.js",
          "module": "./src/apis/RecommendedSubreddits.es6.js",
          "moduleName": "./src/apis/RecommendedSubreddits.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/Subreddit",
          "loc": "4:0-45"
        },
        {
          "moduleId": 46,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditsByPost.es6.js",
          "module": "./src/apis/SubredditsByPost.es6.js",
          "moduleName": "./src/apis/SubredditsByPost.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/Subreddit",
          "loc": "6:0-45"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./models2/Subreddit",
          "loc": "131:0-44"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport RedditModel from './RedditModel';\nimport { SUBREDDIT } from './thingTypes';\nimport subscriptions from '../apis/subscriptions';\n\nvar T = RedditModel.Types;\n\n// If the data doesn't have all of the keys, get the full subreddit data\n// and then merge in the changes and submit _that_. The API requires the\n// full object be sent.\n// Whoever uses this new model for posting should confirm that\n// this is the full list of edit fields, you may just be able to\n// say something like\nvar EDIT_FIELDS = ['default_set', 'subreddit_id', 'domain', 'show_media', 'wiki_edit_age', 'submit_text', 'spam_links', 'title', 'collapse_deleted_comments', 'wikimode', 'over_18', 'related_subreddits', 'suggested_comment_sort', 'description', 'submit_link_label', 'spam_comments', 'spam_selfposts', 'submit_text_label', 'key_color', 'language', 'wiki_edit_karma', 'hide_ads', 'header_hover_text', 'public_traffic', 'public_description', 'comment_score_hide_mins', 'subreddit_type', 'exclude_banned_modqueue', 'submission_type'].sort();\n\nvar Subreddit = function (_RedditModel) {\n  _inherits(Subreddit, _RedditModel);\n\n  function Subreddit() {\n    _classCallCheck(this, Subreddit);\n\n    return _possibleConstructorReturn(this, (Subreddit.__proto__ || Object.getPrototypeOf(Subreddit)).apply(this, arguments));\n  }\n\n  _createClass(Subreddit, [{\n    key: 'makeUUID',\n\n\n    // we want to be able to lookup subreddits by name. This way when you have a\n    // a permalink url with the subredddit name or someone types in a subreddit name\n    // in the goto field we can look-up the subreddit in our cache without converting\n    // the name to a thing_id.\n    value: function makeUUID(data) {\n      var url = data.url;\n\n      return Subreddit.cleanName(url);\n    }\n  }, {\n    key: 'makePaginationId',\n    value: function makePaginationId(data) {\n      return data.name; // this is the thing fullname\n    }\n  }, {\n    key: 'toggleSubscribed',\n    value: function toggleSubscribed(apiOptions) {\n      var _this2 = this;\n\n      var userIsSubscriber = this.userIsSubscriber;\n\n      var toggled = !userIsSubscriber;\n      var oldModel = this;\n\n      var stub = this.stub('userIsSubscriber', toggled, _asyncToGenerator(regeneratorRuntime.mark(function _callee() {\n        var data, endpoint;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                data = { subreddit: oldModel.name };\n                endpoint = toggled ? subscriptions.post : subscriptions.del;\n                _context.next = 5;\n                return endpoint(apiOptions, data);\n\n              case 5:\n                return _context.abrupt('return', stub);\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context['catch'](0);\n                throw oldModel;\n\n              case 11:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this2, [[0, 8]]);\n      })));\n\n      return stub;\n    }\n  }]);\n\n  return Subreddit;\n}(RedditModel);\n\nSubreddit.type = SUBREDDIT;\nSubreddit.fields = EDIT_FIELDS;\nSubreddit.PROPERTIES = {\n  accountsActive: T.number,\n  bannerImage: T.string,\n  bannerSize: T.arrayOf(T.number),\n  collapseDeletedComments: T.bool,\n  commentScoreHideMins: T.number,\n  createdUTC: T.number,\n  description: T.string,\n  descriptionHTML: T.string,\n  displayName: T.string,\n  headerImage: T.string,\n  headerSize: T.arrayOf(T.number),\n  headerTitle: T.string,\n  hideAds: T.bool,\n  iconImage: T.string,\n  iconSize: T.arrayOf(T.number),\n  id: T.string,\n  keyColor: T.string,\n  lang: T.string,\n  name: T.string,\n  over18: T.bool,\n  publicDescription: T.string,\n  publicTraffic: T.nop,\n  quarantine: T.bool,\n  relatedSubreddits: T.array,\n  spoilersEnabled: T.bool,\n  submissionType: T.string,\n  submitLinkLabel: T.string,\n  submitText: T.string,\n  submitTextLabel: T.string,\n  subredditType: T.string,\n  subscribers: T.number,\n  suggestedCommentSort: T.string,\n  title: T.string,\n  url: T.string,\n  userIsBanned: T.bool,\n  userIsContributor: T.bool,\n  userIsModerator: T.bool,\n  userIsMuted: T.bool,\n  userIsSubscriber: T.bool,\n  userSrThemeEnabled: T.bool,\n  wikiEnabled: T.bool\n};\nSubreddit.API_ALIASES = {\n  accounts_active: 'accountsActive',\n  banner_img: 'bannerImage',\n  banner_size: 'bannerSize',\n  collapse_deleted_comments: 'collapseDeletedComments',\n  comment_score_hide_mins: 'commentScoreHideMins',\n  created_utc: 'createdUTC',\n  description_html: 'descriptionHTML',\n  display_name: 'displayName',\n  header_img: 'headerImage',\n  header_size: 'headerSize',\n  header_title: 'headerTitle',\n  hide_ads: 'hideAds',\n  icon_img: 'iconImage',\n  icon_size: 'iconSize',\n  key_color: 'keyColor',\n  public_description: 'publicDescription',\n  public_traffic: 'publicTraffic',\n  related_subreddits: 'relatedSubreddits',\n  spoilers_enabled: 'spoilersEnabled',\n  submission_type: 'submissionType',\n  submit_link_label: 'submitLinkLabel',\n  submit_text_label: 'submitTextLabel',\n  submit_text: 'submitText',\n  subreddit_type: 'subredditType',\n  user_is_banned: 'userIsBanned',\n  user_is_contributor: 'userIsContributor',\n  user_is_moderator: 'userIsModerator',\n  user_is_muted: 'userIsMuted',\n  user_is_subscriber: 'userIsSubscriber',\n  user_sr_theme_enabled: 'userSrThemeEnabled',\n  wiki_enabled: 'wikiEnabled'\n};\n\nSubreddit.cleanName = function (name) {\n  if (!name) {\n    return name;\n  }\n  return name.replace(/^\\/?r\\//, '').replace(/\\/?$/, '').toLowerCase();\n};\n\nexport default Subreddit;"
    },
    {
      "id": 8,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/ResponseError.js",
      "name": "./src/apiBase/errors/ResponseError.js",
      "index": 10,
      "index2": 8,
      "size": 4037,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/apiRequest.js",
          "module": "./src/apiBase/apiRequest.js",
          "moduleName": "./src/apiBase/apiRequest.js",
          "type": "harmony import",
          "userRequest": "./errors/ResponseError",
          "loc": "6:0-51"
        },
        {
          "moduleId": 2,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
          "module": "./src/apiBase/APIRequestUtils.es6.js",
          "moduleName": "./src/apiBase/APIRequestUtils.es6.js",
          "type": "harmony import",
          "userRequest": "./errors/ResponseError",
          "loc": "8:0-51"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/errors/ResponseError",
          "loc": "97:0-59"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/errors/ResponseError",
          "loc": "98:0-67"
        }
      ],
      "usedExports": [
        "default",
        "DisconnectedError"
      ],
      "providedExports": [
        "DisconnectedError",
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport FakeError from './FakeError';\n\nexport var DisconnectedError = function (_FakeError) {\n  _inherits(DisconnectedError, _FakeError);\n\n  function DisconnectedError(error, url) {\n    _classCallCheck(this, DisconnectedError);\n\n    var _this = _possibleConstructorReturn(this, (DisconnectedError.__proto__ || Object.getPrototypeOf(DisconnectedError)).call(this, 'URL ' + url + ' not reachable. You are probably disconnected from the internet.'));\n\n    _this.safeAssignProps(error);\n    return _this;\n  }\n\n  return DisconnectedError;\n}(FakeError);\n\nvar codeMap = {\n  ECONNREFUSED: DisconnectedError,\n  ENOTFOUND: DisconnectedError\n};\n\nvar ResponseError = function (_FakeError2) {\n  _inherits(ResponseError, _FakeError2);\n\n  function ResponseError(error, url) {\n    _classCallCheck(this, ResponseError);\n\n    // Make sure an error and url were actually passed in\n    if (!error) {\n      throw new Error('No error passed to ResponseError');\n    }\n    if (!url) {\n      throw new Error('No url passed to ResponseError');\n    }\n\n    // HACK: technically, we should be able to skip right to the check for\n    // `if (error.code && error.syscall) { ... }`, but there's a bug in babel\n    // preventing us from doing so. Babel wants to make sure `super` is called\n    // before we exit this constructor. This check is technically unneeded, because\n    // we're returning a new instance of a separate class -- and aborting init\n    // of this class. To workaround this, call super ahead of time\n    // so babel's check passes.\n    //\n    // NOTE: If you're looking through compiled code, this fixes a bug where\n    // babel added a call to `_possibleConstructorReturn` that was passed a var\n    // named `_this2` which was declared but isn't initialized until `super` runs\n\n    var _this2 = _possibleConstructorReturn(this, (ResponseError.__proto__ || Object.getPrototypeOf(ResponseError)).call(this, 'Status ' + error.status + ' returned from API request to ' + url));\n\n    _this2.safeAssignProps(error);\n    _this2.name = 'ResponseError';\n\n    // Check if it's a disconnection error or something else weird\n    if (error.code && error.syscall) {\n      var _ret;\n\n      return _ret = ResponseError.getSystemLevelError(error, url), _possibleConstructorReturn(_this2, _ret);\n    }\n    return _this2;\n  }\n\n  _createClass(ResponseError, null, [{\n    key: 'getSystemLevelError',\n    value: function getSystemLevelError(error, url) {\n      var E = codeMap[error.code] || Error;\n      return new E(error, url);\n    }\n  }]);\n\n  return ResponseError;\n}(FakeError);\n\nexport default ResponseError;"
    },
    {
      "id": 9,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/FakeError.es6.js",
      "name": "./src/apiBase/errors/FakeError.es6.js",
      "index": 8,
      "index2": 6,
      "size": 1928,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/NoModelError.js",
      "issuerId": 15,
      "issuerName": "./src/apiBase/errors/NoModelError.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/ValidationError.js",
          "module": "./src/apiBase/errors/ValidationError.js",
          "moduleName": "./src/apiBase/errors/ValidationError.js",
          "type": "harmony import",
          "userRequest": "./FakeError",
          "loc": "7:0-36"
        },
        {
          "moduleId": 8,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/ResponseError.js",
          "module": "./src/apiBase/errors/ResponseError.js",
          "moduleName": "./src/apiBase/errors/ResponseError.js",
          "type": "harmony import",
          "userRequest": "./FakeError",
          "loc": "9:0-36"
        },
        {
          "moduleId": 15,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/NoModelError.js",
          "module": "./src/apiBase/errors/NoModelError.js",
          "moduleName": "./src/apiBase/errors/NoModelError.js",
          "type": "harmony import",
          "userRequest": "./FakeError",
          "loc": "7:0-36"
        },
        {
          "moduleId": 21,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/BadCaptchaError.es6.js",
          "module": "./src/apiBase/errors/BadCaptchaError.es6.js",
          "moduleName": "./src/apiBase/errors/BadCaptchaError.es6.js",
          "type": "harmony import",
          "userRequest": "./FakeError",
          "loc": "7:0-36"
        },
        {
          "moduleId": 22,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/NotImplementedError.js",
          "module": "./src/apiBase/errors/NotImplementedError.js",
          "moduleName": "./src/apiBase/errors/NotImplementedError.js",
          "type": "harmony import",
          "userRequest": "./FakeError",
          "loc": "7:0-36"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport omit from 'lodash/omit';\n\nvar FakeError = function () {\n  function FakeError(message) {\n    _classCallCheck(this, FakeError);\n\n    Object.defineProperty(this, 'message', { value: message });\n\n    if (Error.hasOwnProperty('captureStackTrace')) {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      Object.defineProperty(this, 'stack', { value: new Error().stack });\n    }\n  }\n\n  /**\n  * Use this when you want to merge properties from an object onto\n  * an instance of FakeError. In other FakeError subclasses we used to\n  * write things like `Object.assign(fakeErrorInstance, errorObject)`.\n  * This code breaks because `errorObject`, an instnace of the Error class,\n  * can have a property called `message` or `stack` that we assign\n  * as read-only properties in the FakeError constructor.\n  *\n  * @param {Object} - the object we want to copy properties from\n  * @returns {undefined} - used for the side-effect of copying key/values from input\n  */\n\n\n  _createClass(FakeError, [{\n    key: 'safeAssignProps',\n    value: function safeAssignProps(obj) {\n      Object.assign(this, omit(obj, ['message', 'stack']));\n    }\n  }]);\n\n  return FakeError;\n}();\n\nexport default FakeError;"
    },
    {
      "id": 10,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/Listing.es6.js",
      "name": "./src/collections/Listing.es6.js",
      "index": 62,
      "index2": 60,
      "size": 11221,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SubredditLists.js",
      "issuerId": 56,
      "issuerName": "./src/collections/SubredditLists.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 29,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SavedPostsAndComments.es6.js",
          "module": "./src/collections/SavedPostsAndComments.es6.js",
          "moduleName": "./src/collections/SavedPostsAndComments.es6.js",
          "type": "harmony import",
          "userRequest": "./Listing",
          "loc": "11:0-32"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/CommentsPage.es6.js",
          "module": "./src/collections/CommentsPage.es6.js",
          "moduleName": "./src/collections/CommentsPage.es6.js",
          "type": "harmony import",
          "userRequest": "./Listing",
          "loc": "13:0-32"
        },
        {
          "moduleId": 54,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/PostsFromSubreddit.es6.js",
          "module": "./src/collections/PostsFromSubreddit.es6.js",
          "moduleName": "./src/collections/PostsFromSubreddit.es6.js",
          "type": "harmony import",
          "userRequest": "./Listing",
          "loc": "11:0-32"
        },
        {
          "moduleId": 55,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SearchQuery.es6.js",
          "module": "./src/collections/SearchQuery.es6.js",
          "moduleName": "./src/collections/SearchQuery.es6.js",
          "type": "harmony import",
          "userRequest": "./Listing",
          "loc": "15:0-32"
        },
        {
          "moduleId": 56,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SubredditLists.js",
          "module": "./src/collections/SubredditLists.js",
          "moduleName": "./src/collections/SubredditLists.js",
          "type": "harmony import",
          "userRequest": "./Listing",
          "loc": "12:0-32"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport omit from 'lodash/omit';\n\nimport { afterResponse, beforeResponse } from '../apiBase/APIResponsePaging';\n\nvar identity = function identity(id) {\n  return id;\n};\n\n// Base class for paged collections\n// TODO: rethink base options a bit, whould base options just really make everytyhing?\n// think more about next page and etc, it should be easy to do paged requests\n// in the very first fetch call\n\nvar Listing = function () {\n  _createClass(Listing, null, [{\n    key: 'baseOptions',\n    value: function baseOptions() {\n      return {};\n    }\n  }, {\n    key: 'getResponse',\n    value: function () {\n      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(apiOptions) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.endpoint.get(apiOptions, _extends({}, this.baseOptions(), options));\n\n              case 2:\n                res = _context.sent;\n                return _context.abrupt('return', res);\n\n              case 4:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getResponse(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return getResponse;\n    }()\n  }, {\n    key: 'fetch',\n    value: function () {\n      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(apiOptions) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = this;\n                _context2.next = 3;\n                return this.getResponse(apiOptions, options);\n\n              case 3:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt('return', new _context2.t0(_context2.t1));\n\n              case 5:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetch(_x4, _x5) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }]);\n\n  function Listing(apiResponse) {\n    _classCallCheck(this, Listing);\n\n    this.apiResponse = apiResponse;\n    this.nextResponse = this.nextResponse.bind(this);\n    this.prevResponse = this.prevResponse.bind(this);\n  }\n\n  _createClass(Listing, [{\n    key: 'afterId',\n    value: function afterId(apiResponse) {\n      return afterResponse(apiResponse);\n    }\n  }, {\n    key: 'hasNextPage',\n    value: function hasNextPage() {\n      return !!this.afterId;\n    }\n  }, {\n    key: 'prevId',\n    value: function prevId(apiResponse) {\n      return beforeResponse(apiResponse);\n    }\n  }, {\n    key: 'hasPreviousPage',\n    value: function hasPreviousPage() {\n      return !!this.prevId;\n    }\n  }, {\n    key: 'nextResponse',\n    value: function () {\n      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(apiOptions) {\n        var after, options;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                after = this.afterId(this.apiResponse);\n\n                if (after) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt('return');\n\n              case 3:\n                options = omit(_extends({}, this.apiResponse.query, { after: after }), 'before');\n                _context3.next = 6;\n                return this.constructor.getResponse(apiOptions, options);\n\n              case 6:\n                return _context3.abrupt('return', _context3.sent);\n\n              case 7:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function nextResponse(_x7) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return nextResponse;\n    }()\n  }, {\n    key: 'prevResponse',\n    value: function () {\n      var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(apiOptions) {\n        var before, options;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                before = this.prevId(this.apiResponse);\n\n                if (before) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt('return');\n\n              case 3:\n                options = omit(_extends({}, this.apiResponse.query, { before: before }), 'after');\n                _context4.next = 6;\n                return this.constructor.getResponse(apiOptions, options);\n\n              case 6:\n                return _context4.abrupt('return', _context4.sent);\n\n              case 7:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function prevResponse(_x8) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return prevResponse;\n    }()\n  }, {\n    key: 'fetchAndMakeInstance',\n    value: function () {\n      var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(fetchMethod, apiOptions, reduceResponse) {\n        var response;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return fetchMethod(apiOptions);\n\n              case 2:\n                response = _context5.sent;\n\n                if (!response) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt('return', new this.constructor(reduceResponse(response)));\n\n              case 5:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function fetchAndMakeInstance(_x9, _x10, _x11) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return fetchAndMakeInstance;\n    }()\n  }, {\n    key: 'nextPage',\n    value: function () {\n      var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(apiOptions) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt('return', this.fetchAndMakeInstance(this.nextResponse, apiOptions, identity));\n\n              case 1:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function nextPage(_x12) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return nextPage;\n    }()\n  }, {\n    key: 'withNextPage',\n    value: function () {\n      var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(apiOptions) {\n        var nextResponse, apiResponse;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                nextResponse = this.nextResponse;\n                apiResponse = this.apiResponse;\n                return _context7.abrupt('return', this.fetchAndMakeInstance(nextResponse, apiOptions, apiResponse.appendResponse));\n\n              case 3:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function withNextPage(_x13) {\n        return _ref7.apply(this, arguments);\n      }\n\n      return withNextPage;\n    }()\n  }, {\n    key: 'prevPage',\n    value: function () {\n      var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(apiOptions) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt('return', this.fetchAndMakeInstance(this.prevResponse, apiOptions, identity));\n\n              case 1:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function prevPage(_x14) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return prevPage;\n    }()\n  }, {\n    key: 'withPrevPage',\n    value: function () {\n      var _ref9 = _asyncToGenerator(regeneratorRuntime.mark(function _callee9(apiOptions) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt('return', this.fetchAndMakeInstance(this.prevResponse, apiOptions, function (prevResponse) {\n                  return prevResponse.appendResponse(_this.apiResponse);\n                }));\n\n              case 1:\n              case 'end':\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function withPrevPage(_x15) {\n        return _ref9.apply(this, arguments);\n      }\n\n      return withPrevPage;\n    }()\n  }]);\n\n  return Listing;\n}();\n\nListing.endpoint = {\n  get: function get() {}\n};\nexport default Listing;"
    },
    {
      "id": 11,
      "identifier": "external \"isEmpty\"",
      "name": "external \"isEmpty\"",
      "index": 45,
      "index2": 43,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/RecommendedSubreddits.es6.js",
      "issuerId": 43,
      "issuerName": "./src/apis/RecommendedSubreddits.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 27,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditEndpoint.es6.js",
          "module": "./src/apis/SubredditEndpoint.es6.js",
          "moduleName": "./src/apis/SubredditEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/isEmpty",
          "loc": "4:0-37"
        },
        {
          "moduleId": 43,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/RecommendedSubreddits.es6.js",
          "module": "./src/apis/RecommendedSubreddits.es6.js",
          "moduleName": "./src/apis/RecommendedSubreddits.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/isEmpty",
          "loc": "1:0-37"
        },
        {
          "moduleId": 44,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SimilarPosts.es6.js",
          "module": "./src/apis/SimilarPosts.es6.js",
          "moduleName": "./src/apis/SimilarPosts.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/isEmpty",
          "loc": "3:0-37"
        },
        {
          "moduleId": 46,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditsByPost.es6.js",
          "module": "./src/apis/SubredditsByPost.es6.js",
          "moduleName": "./src/apis/SubredditsByPost.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/isEmpty",
          "loc": "3:0-37"
        },
        {
          "moduleId": 47,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditsToPostsByPost.es6.js",
          "module": "./src/apis/SubredditsToPostsByPost.es6.js",
          "moduleName": "./src/apis/SubredditsToPostsByPost.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/isEmpty",
          "loc": "3:0-37"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": null
    },
    {
      "id": 12,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIResponse.es6.js",
      "name": "./src/apiBase/APIResponse.es6.js",
      "index": 4,
      "index2": 4,
      "size": 7092,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/apiRequest.js",
          "module": "./src/apiBase/apiRequest.js",
          "moduleName": "./src/apiBase/apiRequest.js",
          "type": "harmony import",
          "userRequest": "./APIResponse",
          "loc": "5:0-44"
        },
        {
          "moduleId": 2,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
          "module": "./src/apiBase/APIRequestUtils.es6.js",
          "moduleName": "./src/apiBase/APIRequestUtils.es6.js",
          "type": "harmony import",
          "userRequest": "./APIResponse",
          "loc": "6:0-44"
        },
        {
          "moduleId": 13,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIResponsePaging.es6.js",
          "module": "./src/apiBase/APIResponsePaging.es6.js",
          "moduleName": "./src/apiBase/APIResponsePaging.es6.js",
          "type": "harmony import",
          "userRequest": "./APIResponse",
          "loc": "9:0-49"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/APIResponse",
          "loc": "42:0-70"
        }
      ],
      "usedExports": [
        "APIResponse",
        "MergedApiReponse"
      ],
      "providedExports": [
        "APIResponseBase",
        "APIResponse",
        "MergedApiReponse"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport last from 'lodash/last';\n\nimport { TYPES, thingType, COMMENT, ACCOUNT, POST, MESSAGE, SUBREDDIT, WIKI } from '../models2/thingTypes';\n\nexport var APIResponseBase = function () {\n  function APIResponseBase() {\n    var _typeToTable;\n\n    _classCallCheck(this, APIResponseBase);\n\n    this.results = [];\n\n    this.posts = {};\n    this.comments = {};\n    this.accounts = {};\n    this.messages = {};\n    this.subreddits = {};\n    this.wikis = {};\n\n    this.typeToTable = (_typeToTable = {}, _defineProperty(_typeToTable, COMMENT, this.comments), _defineProperty(_typeToTable, POST, this.posts), _defineProperty(_typeToTable, ACCOUNT, this.accounts), _defineProperty(_typeToTable, MESSAGE, this.messages), _defineProperty(_typeToTable, SUBREDDIT, this.subreddits), _defineProperty(_typeToTable, WIKI, this.wikis), _typeToTable);\n\n    this.addResult = this.addResult.bind(this);\n    this.addModel = this.addModel.bind(this);\n    this.makeRecord = this.makeRecord.bind(this);\n    this.addToTable = this.addToTable.bind(this);\n    this.getModelFromRecord = this.getModelFromRecord.bind(this);\n    this.appendResponse = this.appendResponse.bind(this);\n  }\n\n  _createClass(APIResponseBase, [{\n    key: 'addResult',\n    value: function addResult(model) {\n      if (!model) {\n        return this;\n      }\n      var record = this.makeRecord(model);\n      if (record) {\n        this.results.push(record);\n        this.addToTable(record, model);\n      }\n\n      return this;\n    }\n  }, {\n    key: 'addModel',\n    value: function addModel(model) {\n      if (!model) {\n        return this;\n      }\n      var record = this.makeRecord(model);\n      if (record) {\n        this.addToTable(record, model);\n      }\n\n      return this;\n    }\n  }, {\n    key: 'makeRecord',\n    value: function makeRecord(model) {\n      if (model.toRecord) {\n        return model.toRecord();\n      }\n      var uuid = model.uuid;\n\n      if (!uuid) {\n        return;\n      }\n\n      var type = TYPES[model.kind] || thingType(uuid);\n      if (!type) {\n        return;\n      }\n      return { type: type, uuid: uuid };\n    }\n  }, {\n    key: 'addToTable',\n    value: function addToTable(record, model) {\n      var table = this.typeToTable[record.type];\n      if (table) {\n        table[record.uuid] = model;\n      }\n      return this;\n    }\n  }, {\n    key: 'getModelFromRecord',\n    value: function getModelFromRecord(record) {\n      var table = this.typeToTable[record.type];\n      if (table) {\n        return table[record.uuid];\n      }\n    }\n  }, {\n    key: 'appendResponse',\n    value: function appendResponse() {\n      throw new Error('Not implemented in base class');\n    }\n  }]);\n\n  return APIResponseBase;\n}();\n\nexport var APIResponse = function (_APIResponseBase) {\n  _inherits(APIResponse, _APIResponseBase);\n\n  function APIResponse(response) {\n    var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, APIResponse);\n\n    var _this = _possibleConstructorReturn(this, (APIResponse.__proto__ || Object.getPrototypeOf(APIResponse)).call(this));\n\n    _this.request = response.req;\n    _this.response = response;\n\n    // Left for backwards compatibility, you can use request and response directly\n    _this.meta = meta;\n    _this.query = query;\n    return _this;\n  }\n\n  _createClass(APIResponse, [{\n    key: 'appendResponse',\n    value: function appendResponse(nextResponse) {\n      return new MergedApiReponse([this, nextResponse]);\n    }\n  }]);\n\n  return APIResponse;\n}(APIResponseBase);\n\nexport var MergedApiReponse = function (_APIResponseBase2) {\n  _inherits(MergedApiReponse, _APIResponseBase2);\n\n  function MergedApiReponse(apiResponses) {\n    _classCallCheck(this, MergedApiReponse);\n\n    var _this2 = _possibleConstructorReturn(this, (MergedApiReponse.__proto__ || Object.getPrototypeOf(MergedApiReponse)).call(this));\n\n    _this2.metas = apiResponses.map(function (response) {\n      return response.meta;\n    });\n    _this2.querys = apiResponses.map(function (response) {\n      return response.query;\n    });\n\n    _this2.apiResponses = apiResponses;\n\n    var seenResults = new Set();\n\n    var tableKeys = [COMMENT, ACCOUNT, POST, MESSAGE, SUBREDDIT];\n\n    apiResponses.forEach(function (apiResponse) {\n      apiResponse.results.forEach(function (record) {\n        if (!seenResults.has(record.uuid)) {\n          seenResults.add(record.uuid);\n          _this2.results.push(record);\n        }\n      });\n\n      tableKeys.forEach(function (tableKey) {\n        var table = _this2.typeToTable[tableKey];\n        Object.assign(table, apiResponse.typeToTable[tableKey]);\n      });\n    });\n    return _this2;\n  }\n\n  _createClass(MergedApiReponse, [{\n    key: 'appendResponse',\n    value: function appendResponse(response) {\n      var newReponses = this.apiResponses.slice();\n      newReponses.push(response);\n\n      return new MergedApiReponse(newReponses);\n    }\n  }, {\n    key: 'lastResponse',\n    get: function get() {\n      return last(this.apiResponses);\n    }\n  }, {\n    key: 'lastQuery',\n    get: function get() {\n      return last(this.querys);\n    }\n  }, {\n    key: 'lastMeta',\n    get: function get() {\n      return last(this.meta);\n    }\n  }, {\n    key: 'query',\n    get: function get() {\n      // shorthand convenience\n      return this.latQuery;\n    }\n  }]);\n\n  return MergedApiReponse;\n}(APIResponseBase);"
    },
    {
      "id": 13,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIResponsePaging.es6.js",
      "name": "./src/apiBase/APIResponsePaging.es6.js",
      "index": 59,
      "index2": 58,
      "size": 3124,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 10,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/Listing.es6.js",
          "module": "./src/collections/Listing.es6.js",
          "moduleName": "./src/collections/Listing.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIResponsePaging",
          "loc": "11:0-77"
        },
        {
          "moduleId": 55,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SearchQuery.es6.js",
          "module": "./src/collections/SearchQuery.es6.js",
          "moduleName": "./src/collections/SearchQuery.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIResponsePaging",
          "loc": "17:0-66"
        },
        {
          "moduleId": 56,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SubredditLists.js",
          "module": "./src/collections/SubredditLists.js",
          "moduleName": "./src/collections/SubredditLists.js",
          "type": "harmony import",
          "userRequest": "../apiBase/APIResponsePaging",
          "loc": "11:0-87"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/APIResponsePaging",
          "loc": "48:0-106"
        }
      ],
      "usedExports": [
        "withQueryAndResult",
        "afterResponse",
        "beforeResponse",
        "fetchAll"
      ],
      "providedExports": [
        "withQueryAndResult",
        "afterResponse",
        "beforeResponse",
        "fetchAll"
      ],
      "source": "var _this = this;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nimport last from 'lodash/last';\n\nimport { MergedApiReponse } from './APIResponse';\n\nexport var withQueryAndResult = function withQueryAndResult(response, fn) {\n  var query = void 0;\n  var results = void 0;\n\n  if (response instanceof MergedApiReponse) {\n    query = response.lastQuery;\n    results = response.lastResponse.results;\n  } else {\n    query = response.query;\n    results = response.results;\n  }\n\n  return fn(query, results);\n};\n\nexport var afterResponse = function afterResponse(response) {\n  return withQueryAndResult(response, function (query, results) {\n    var limit = query.limit || 25;\n    return results.length >= limit ? last(results).paginationId : null;\n  });\n};\n\nexport var beforeResponse = function beforeResponse(response) {\n  return withQueryAndResult(response, function (query, results) {\n    return query.after ? results[0].paginationId : null;\n  });\n};\n\nexport var fetchAll = function () {\n  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(fetchFunction, apiOptions, initialParams) {\n    var afterFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : afterResponse;\n    var params, response, after;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            params = _extends({}, initialParams);\n            _context.next = 3;\n            return fetchFunction(apiOptions, params);\n\n          case 3:\n            response = _context.sent;\n            after = afterFn(response);\n\n          case 5:\n            if (!after) {\n              _context.next = 15;\n              break;\n            }\n\n            params = _extends({}, params, { after: after });\n            _context.t0 = response;\n            _context.next = 10;\n            return fetchFunction(apiOptions, params);\n\n          case 10:\n            _context.t1 = _context.sent;\n            response = _context.t0.appendResponse.call(_context.t0, _context.t1);\n\n            after = afterResponse(response);\n            _context.next = 5;\n            break;\n\n          case 15:\n            return _context.abrupt('return', response);\n\n          case 16:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, _this);\n  }));\n\n  return function fetchAll(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();"
    },
    {
      "id": 14,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/Record.es6.js",
      "name": "./src/apiBase/Record.es6.js",
      "index": 20,
      "index2": 15,
      "size": 430,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/CommentModel.es6.js",
          "module": "./src/models2/CommentModel.es6.js",
          "moduleName": "./src/models2/CommentModel.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/Record",
          "loc": "12:0-39"
        },
        {
          "moduleId": 20,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/Model.es6.js",
          "module": "./src/apiBase/Model.es6.js",
          "moduleName": "./src/apiBase/Model.es6.js",
          "type": "harmony import",
          "userRequest": "./Record",
          "loc": "11:0-30"
        },
        {
          "moduleId": 32,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Wiki.es6.js",
          "module": "./src/models2/Wiki.es6.js",
          "moduleName": "./src/models2/Wiki.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/Record",
          "loc": "10:0-39"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/Record",
          "loc": "44:0-38"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Record = function Record(type, uuid) {\n  var paginationId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : uuid;\n\n  _classCallCheck(this, Record);\n\n  this.type = type;\n  this.uuid = uuid;\n  this.paginationId = paginationId;\n};\n\nexport default Record;"
    },
    {
      "id": 15,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/NoModelError.js",
      "name": "./src/apiBase/errors/NoModelError.js",
      "index": 7,
      "index2": 7,
      "size": 1412,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 2,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
          "module": "./src/apiBase/APIRequestUtils.es6.js",
          "moduleName": "./src/apiBase/APIRequestUtils.es6.js",
          "type": "harmony import",
          "userRequest": "./errors/NoModelError",
          "loc": "7:0-49"
        },
        {
          "moduleId": 33,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/BaseContentEndpoint.js",
          "module": "./src/apis/BaseContentEndpoint.js",
          "moduleName": "./src/apis/BaseContentEndpoint.js",
          "type": "harmony import",
          "userRequest": "../apiBase/errors/NoModelError",
          "loc": "7:0-58"
        },
        {
          "moduleId": 40,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/EditUserTextEndpoint.js",
          "module": "./src/apis/EditUserTextEndpoint.js",
          "moduleName": "./src/apis/EditUserTextEndpoint.js",
          "type": "harmony import",
          "userRequest": "../apiBase/errors/NoModelError",
          "loc": "2:0-58"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/errors/NoModelError",
          "loc": "96:0-57"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport FakeError from './FakeError';\n\nvar NoModelError = function (_FakeError) {\n  _inherits(NoModelError, _FakeError);\n\n  function NoModelError(endpoint) {\n    _classCallCheck(this, NoModelError);\n\n    var _this = _possibleConstructorReturn(this, (NoModelError.__proto__ || Object.getPrototypeOf(NoModelError)).call(this, 'No model given for api endpoint ' + endpoint));\n\n    _this.name = 'NoModelError';\n    _this.status = 400;\n    return _this;\n  }\n\n  return NoModelError;\n}(FakeError);\n\nexport default NoModelError;"
    },
    {
      "id": 16,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
      "name": "./src/apis/CommentsEndpoint.es6.js",
      "index": 12,
      "index2": 26,
      "size": 3528,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 36,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/replyable.js",
          "module": "./src/models2/mixins/replyable.js",
          "moduleName": "./src/models2/mixins/replyable.js",
          "type": "harmony import",
          "userRequest": "../../apis/CommentsEndpoint",
          "loc": "2:0-50"
        },
        {
          "moduleId": 52,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/CommentsPage.es6.js",
          "module": "./src/collections/CommentsPage.es6.js",
          "moduleName": "./src/collections/CommentsPage.es6.js",
          "type": "harmony import",
          "userRequest": "../apis/CommentsEndpoint",
          "loc": "14:0-56"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/CommentsEndpoint",
          "loc": "21:0-55"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport has from 'lodash/has';\n\nimport apiRequest from '../apiBase/apiRequest';\nimport { formatBaseContentQuery } from './BaseContentEndpoint';\nimport CommentModel from '../models2/CommentModel';\nimport PostModel from '../models2/PostModel';\n\nimport { treeifyComments, parseCommentData, normalizeCommentReplies } from '../lib/commentTreeUtils';\n\nvar formatQuery = function formatQuery(query, method) {\n  formatBaseContentQuery(query, method);\n\n  if (query.commentIds) {\n    query.children = query.commentIds.join(',');\n    query.api_type = 'json';\n    query.link_id = query.linkId;\n\n    delete query.commentIds;\n    delete query.linkId;\n  } else if (has(query, 'query.comment')) {\n    query.comment = query.query.comment;\n    query.context = 1;\n  }\n\n  return query;\n};\n\nvar getPath = function getPath(query) {\n  if (query.user) {\n    return 'user/' + query.user + '/comments.json';\n  } else if (query.commentIds) {\n    return 'api/morechildren.json';\n  } else {\n    return 'comments/' + (query.id || query.linkId).replace(/^t3_/, '') + '.json';\n  }\n};\n\nvar parseGetBody = function parseGetBody(apiResponse, hasChildren) {\n  var body = apiResponse.response.body;\n\n  var comments = [];\n\n  if (Array.isArray(body)) {\n    // The first part of the response is a link\n    var linkData = body[0].data;\n    if (linkData && linkData.children && linkData.children.length) {\n      linkData.children.forEach(function (link) {\n        apiResponse.addModel(PostModel.fromJSON(link.data));\n      });\n    }\n\n    comments = body[1].data.children.map(parseCommentData);\n  } else if (body.json && body.json.data) {\n    var things = body.json.data.things;\n\n    comments = treeifyComments(things.map(parseCommentData));\n  }\n\n  normalizeCommentReplies(comments, true, function (commentJSON, isTopLevel) {\n    // parsing is done bottom up, comment models are immutable\n    // but they'll rely on the records\n    var comment = CommentModel.fromJSON(commentJSON);\n\n    if (isTopLevel) {\n      apiResponse.addResult(comment);\n    } else {\n      apiResponse.addModel(comment);\n    }\n\n    // this sets replies to be records for consistency\n    return comment.toRecord();\n  });\n\n  return apiResponse;\n};\n\nvar parsePostBody = function parsePostBody(apiResponse) {\n  var body = apiResponse.response.body;\n\n\n  if (has(body, 'json.data.things.0.data')) {\n    var comment = body.json.data.things[0].data;\n    apiResponse.addResult(CommentModel.fromJSON(comment));\n  }\n\n  return apiResponse;\n};\n\nexport default {\n  get: function get(apiOptions, _query) {\n    var hasChildren = !!_query.children;\n    var path = getPath(_query);\n    var query = formatQuery(_extends({ raw_json: 1 }, _query));\n\n    return apiRequest(apiOptions, 'GET', path, { query: query }).then(function (apiResponse) {\n      return parseGetBody(apiResponse, hasChildren);\n    });\n  },\n  post: function post(apiOptions, data) {\n    var path = 'api/comment';\n    var body = {\n      api_type: 'json',\n      thing_id: data.thingId,\n      text: data.text,\n      raw_json: 1\n    };\n\n    return apiRequest(apiOptions, 'POST', path, { body: body, type: 'form' }).then(parsePostBody);\n  },\n  del: function del(apiOptions, id) {\n    var body = { id: id };\n    return apiRequest(apiOptions, 'POST', 'api/del', { body: body, type: 'form' });\n  }\n};"
    },
    {
      "id": 17,
      "identifier": "external \"has\"",
      "name": "external \"has\"",
      "index": 13,
      "index2": 11,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
      "issuerId": 16,
      "issuerName": "./src/apis/CommentsEndpoint.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 16,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
          "module": "./src/apis/CommentsEndpoint.es6.js",
          "moduleName": "./src/apis/CommentsEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/has",
          "loc": "3:0-29"
        },
        {
          "moduleId": 34,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedAndHiddenCommon.es6.js",
          "module": "./src/apis/SavedAndHiddenCommon.es6.js",
          "moduleName": "./src/apis/SavedAndHiddenCommon.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/has",
          "loc": "1:0-29"
        },
        {
          "moduleId": 41,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/MessagesEndpoint.es6.js",
          "module": "./src/apis/MessagesEndpoint.es6.js",
          "moduleName": "./src/apis/MessagesEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/has",
          "loc": "3:0-29"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": null
    },
    {
      "id": 18,
      "identifier": "external \"last\"",
      "name": "external \"last\"",
      "index": 5,
      "index2": 2,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIResponse.es6.js",
      "issuerId": 12,
      "issuerName": "./src/apiBase/APIResponse.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIResponse.es6.js",
          "module": "./src/apiBase/APIResponse.es6.js",
          "moduleName": "./src/apiBase/APIResponse.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/last",
          "loc": "11:0-31"
        },
        {
          "moduleId": 13,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIResponsePaging.es6.js",
          "module": "./src/apiBase/APIResponsePaging.es6.js",
          "moduleName": "./src/apiBase/APIResponsePaging.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/last",
          "loc": "7:0-31"
        },
        {
          "moduleId": 55,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SearchQuery.es6.js",
          "module": "./src/collections/SearchQuery.es6.js",
          "moduleName": "./src/collections/SearchQuery.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/last",
          "loc": "13:0-31"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": null
    },
    {
      "id": 19,
      "identifier": "external \"omit\"",
      "name": "external \"omit\"",
      "index": 9,
      "index2": 5,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedAndHiddenCommon.es6.js",
      "issuerId": 34,
      "issuerName": "./src/apis/SavedAndHiddenCommon.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 9,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/FakeError.es6.js",
          "module": "./src/apiBase/errors/FakeError.es6.js",
          "moduleName": "./src/apiBase/errors/FakeError.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/omit",
          "loc": "5:0-31"
        },
        {
          "moduleId": 10,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/Listing.es6.js",
          "module": "./src/collections/Listing.es6.js",
          "moduleName": "./src/collections/Listing.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/omit",
          "loc": "9:0-31"
        },
        {
          "moduleId": 34,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedAndHiddenCommon.es6.js",
          "module": "./src/apis/SavedAndHiddenCommon.es6.js",
          "moduleName": "./src/apis/SavedAndHiddenCommon.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/omit",
          "loc": "2:0-31"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": null
    },
    {
      "id": 20,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/Model.es6.js",
      "name": "./src/apiBase/Model.es6.js",
      "index": 19,
      "index2": 16,
      "size": 9357,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 4,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
          "module": "./src/models2/RedditModel.es6.js",
          "moduleName": "./src/models2/RedditModel.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/Model",
          "loc": "13:0-37"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/Model",
          "loc": "43:0-36"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Record from './Record';\n\nvar fakeUUID = function fakeUUID() {\n  return (Math.random() * 16).toFixed();\n};\n\n// Model class that handles parsing, serializing, and pseudo-validation.\n// Provides a mechanism for creating stubs (which will represent incremental UI updates)\n// and fulfill themselves to the proper result of api calls\n//\n// An example class will look like\n//\n// const T = Model.Types\n// class Post extends Model {\n//  static type = LINK;\n//\n//  static API_ALIASES = {\n//    body_html: 'bodyHTML,\n//    score_hidden: 'scoreHidden',\n//   }\n//\n//  static PROPERTIES = {\n//    id: T.string,\n//    author: T.string,\n//    bodyHTML: T.html,\n//    replies: T.array,\n//    links: T.arrayOf(T.link)\n//    cleanURL: T.link\n//  }\n// }\n//\n\nvar Model = function () {\n  _createClass(Model, null, [{\n    key: 'fromJSON',\n    value: function fromJSON(obj) {\n      return new this(obj);\n    }\n\n    // put value transformers here. They'll take input and pseudo-validate it and\n    // transform it. You'll put thme in your subclasses PROPERITES dictionary.\n\n  }, {\n    key: 'Mock',\n    value: function Mock() {\n      var _this = this;\n\n      var data = Object.keys(this.PROPERTIES).reduce(function (prev, cur) {\n        return _extends({}, prev, _defineProperty({}, cur, _this.MOCKS[cur] ? _this.MOCKS[cur]() : null));\n      }, {});\n\n      return new this(data);\n    }\n  }]);\n\n  function Model(data, SUPER_SECRET_SHOULD_FREEZE_FLAG_THAT_ONLY_STUBS_CAN_USE) {\n    _classCallCheck(this, Model);\n\n    var _constructor = this.constructor;\n    var API_ALIASES = _constructor.API_ALIASES;\n    var PROPERTIES = _constructor.PROPERTIES;\n    var DERIVED_PROPERTIES = _constructor.DERIVED_PROPERTIES;\n\n    // Please note: the use of for loops and adding properties directly\n    // and then freezing (versus using defineProperty with writeable false)\n    // is very intentional. Because performance. Please consult schwers or frontend-platform\n    // before modifying\n\n    var dataKeys = Object.keys(data);\n    for (var i = 0; i < dataKeys.length; i++) {\n      var key = dataKeys[i];\n      if (DERIVED_PROPERTIES[key]) {\n        // skip if there's a dervied key of the same name\n        continue;\n      }\n\n      var keyName = API_ALIASES[key];\n      if (!keyName) {\n        keyName = key;\n      }\n\n      var typeFn = PROPERTIES[keyName];\n      if (typeFn) {\n        this[keyName] = typeFn(data[key]);\n      }\n    }\n\n    for (var propName in PROPERTIES) {\n      if (this[propName] === undefined) {\n        this[propName] = PROPERTIES[propName]();\n      }\n    }\n\n    var derivedKeys = Object.keys(DERIVED_PROPERTIES);\n    for (var _i = 0; _i < derivedKeys.length; _i++) {\n      var derivedKey = derivedKeys[_i];\n      var derviceFn = DERIVED_PROPERTIES[derivedKey];\n      var _typeFn = PROPERTIES[derivedKey];\n\n      if (derviceFn && _typeFn) {\n        this[derivedKey] = _typeFn(derviceFn(data));\n      }\n    }\n\n    this.uuid = this.makeUUID(data);\n    this.paginationId = this.makePaginationId(data);\n    this.type = this.getType(data, this.uuid);\n\n    if (!SUPER_SECRET_SHOULD_FREEZE_FLAG_THAT_ONLY_STUBS_CAN_USE) {\n      Object.freeze(this);\n    }\n  }\n\n  _createClass(Model, [{\n    key: '_diff',\n    value: function _diff(keyOrObject, value) {\n      return (typeof keyOrObject === 'undefined' ? 'undefined' : _typeof(keyOrObject)) === 'object' ? keyOrObject : _defineProperty({}, keyOrObject, value);\n    }\n  }, {\n    key: 'set',\n    value: function set(keyOrObject, value) {\n      return new this.constructor(_extends({}, this.toJSON(), this._diff(keyOrObject, value)));\n    }\n\n    // .stub() is for encoding optimistic updates and other transient states\n    //    while waiting for async actions.\n    //\n    // A reddit-example is voting. `link.upvote()` needs to handle\n    // a few edgecases like: 'you already upvoted, let's toggle your vote',\n    // 'you downvoted, so the score increase is really +2 for ui (instead of +1)',\n    // and 'we need to add +1 to the score'.\n    // It also needs to handle failure cases like 'that upvote failed, undo everything'.\n    //\n    // Stubs provide a way of encoding an optimistic ui update that includes\n    // all of these cases, that use javascript promises to encode the completion\n    // and final state of this.\n    //\n    // With stubs, `.upvote()` can return a stub object so that you can:\n    // ```javascript\n    // /* upvoteLink is a dispatch thunk */\n    // const upvoteLink = link => (dispatch, getState) => () => {\n    //    const stub = link.upvote();\n    //    dispatch(newLinkData(stub));\n    //\n    //    stub.reject(error => {\n    //      dispatch(failedToUpvote(link));\n    //      // Undo the optimistic ui update. Note: .upvote can choose to\n    //      // catch the reject and pass the old version back in Promise.resolve()\n    //      disaptch(newLinkData(link))\n    //   });\n    //\n    //   return stub.then(finalLink => dispatch(newLinkData(finalLink));\n    // };\n    // ```\n\n  }, {\n    key: 'stub',\n    value: function stub(keyOrObject, valueOrPromise, promise) {\n      if (!promise) {\n        promise = valueOrPromise;\n      }\n\n      var next = _extends({}, this.toJSON(), this._diff(keyOrObject, valueOrPromise));\n      var stub = new this.constructor(next, true);\n      stub.promise = promise;\n      Object.freeze(stub); // super important, don't break the super secret flag\n      return stub;\n    }\n  }, {\n    key: 'makeUUID',\n    value: function makeUUID(data) {\n      if (data.uuid) {\n        return data.uuid;\n      }\n      if (data.id) {\n        return data.id;\n      }\n      console.warn('generating fake uuid');\n      return fakeUUID();\n    }\n  }, {\n    key: 'makePaginationId',\n    value: function makePaginationId(data) {\n      return this.uuid || this.makeUUID(data);\n    }\n  }, {\n    key: 'getType',\n    value: function getType() /* data, uuid */{\n      return this.constructor.type;\n    }\n  }, {\n    key: 'toRecord',\n    value: function toRecord() {\n      return new Record(this.type, this.uuid, this.paginationId);\n    }\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var _this2 = this;\n\n      var obj = {};\n      Object.keys(this).forEach(function (key) {\n        if (_this2.constructor.PROPERTIES[key]) {\n          obj[key] = _this2[key];\n        }\n      });\n\n      obj.__type = this.type;\n      return obj;\n    }\n  }]);\n\n  return Model;\n}();\n\nModel.Types = {\n  string: function string(val) {\n    return val ? String(val) : '';\n  },\n  number: function number(val) {\n    return val === undefined ? 0 : Number(val);\n  },\n  array: function array(val) {\n    return Array.isArray(val) ? val : [];\n  },\n  arrayOf: function arrayOf() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Model.Types.nop;\n    return function (val) {\n      return Model.Types.array(val).map(type);\n    };\n  },\n  bool: function bool(val) {\n    return Boolean(val);\n  },\n  likes: function likes(val) {\n    // coming from our api, these are booleans or null. Coming from\n    // our stub method, these are actual integers\n    switch (val) {\n      case true:\n        return 1;\n      case false:\n        return -1;\n      case null:\n        return 0;\n      default:\n        return val;\n    }\n  },\n\n  nop: function nop(val) {\n    return val;\n  }\n\n};\nModel.MockTypes = {\n  string: function string() {\n    return Math.random().toString(36).substring(Math.floor(Math.random() * 10) + 5);\n  },\n  number: function number() {\n    return Math.floor(Math.random() * 100);\n  },\n  array: function array() {\n    return Array.apply(null, Array(Math.floor(Math.random() * 10)));\n  },\n  bool: function bool() {\n    return Math.floor(Math.random() * 10) < 5;\n  },\n  likes: function likes() {\n    return Math.round(Math.random() * (1 - -1) + -1);\n  },\n  nop: function nop() {\n    return null;\n  }\n};\nModel.API_ALIASES = {};\nModel.PROPERTIES = {};\nModel.MOCKS = {};\nModel.DERIVED_PROPERTIES = {};\nexport default Model;"
    },
    {
      "id": 21,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/BadCaptchaError.es6.js",
      "name": "./src/apiBase/errors/BadCaptchaError.es6.js",
      "index": 34,
      "index2": 32,
      "size": 1669,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PostsEndpoint.js",
          "module": "./src/apis/PostsEndpoint.js",
          "moduleName": "./src/apis/PostsEndpoint.js",
          "type": "harmony import",
          "userRequest": "../apiBase/errors/BadCaptchaError",
          "loc": "6:0-64"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/errors/BadCaptchaError",
          "loc": "100:0-63"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport FakeError from './FakeError';\n\nvar INCORRECT_CAPTCHA = 'Incorrect captcha provided.';\nvar NO_CAPTCHA = 'No captcha provided.';\n\nvar BadCaptchaError = function (_FakeError) {\n  _inherits(BadCaptchaError, _FakeError);\n\n  function BadCaptchaError(captcha, newCaptcha, errors) {\n    _classCallCheck(this, BadCaptchaError);\n\n    var message = captcha ? INCORRECT_CAPTCHA : NO_CAPTCHA;\n\n    var _this = _possibleConstructorReturn(this, (BadCaptchaError.__proto__ || Object.getPrototypeOf(BadCaptchaError)).call(this, message));\n\n    _this.name = 'BadCaptchaError';\n    _this.captcha = captcha;\n    _this.newCaptcha = newCaptcha;\n    _this.errors = errors;\n    _this.status = 200;\n    return _this;\n  }\n\n  return BadCaptchaError;\n}(FakeError);\n\nexport default BadCaptchaError;"
    },
    {
      "id": 22,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/errors/NotImplementedError.js",
      "name": "./src/apiBase/errors/NotImplementedError.js",
      "index": 60,
      "index2": 59,
      "size": 1506,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 52,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/CommentsPage.es6.js",
          "module": "./src/collections/CommentsPage.es6.js",
          "moduleName": "./src/collections/CommentsPage.es6.js",
          "type": "harmony import",
          "userRequest": "../apiBase/errors/NotImplementedError",
          "loc": "15:0-72"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apiBase/errors/NotImplementedError",
          "loc": "101:0-71"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport FakeError from './FakeError';\n\nvar NotImplementedError = function (_FakeError) {\n  _inherits(NotImplementedError, _FakeError);\n\n  function NotImplementedError(method, endpoint) {\n    _classCallCheck(this, NotImplementedError);\n\n    var _this = _possibleConstructorReturn(this, (NotImplementedError.__proto__ || Object.getPrototypeOf(NotImplementedError)).call(this, 'Method ' + method + ' not implemented for api endpoint ' + endpoint));\n\n    _this.name = 'NotImplementedError';\n    _this.status = 405;\n    return _this;\n  }\n\n  return NotImplementedError;\n}(FakeError);\n\nexport default NotImplementedError;"
    },
    {
      "id": 23,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/HiddenEndpoint.es6.js",
      "name": "./src/apis/HiddenEndpoint.es6.js",
      "index": 39,
      "index2": 39,
      "size": 225,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 53,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/HiddenPostsAndComments.es6.js",
          "module": "./src/collections/HiddenPostsAndComments.es6.js",
          "moduleName": "./src/collections/HiddenPostsAndComments.es6.js",
          "type": "harmony import",
          "userRequest": "../apis/HiddenEndpoint",
          "loc": "8:0-52"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/HiddenEndpoint",
          "loc": "27:0-51"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import SavedOrHiddenEndpoint from './SavedAndHiddenCommon';\n\nvar getPath = function getPath(query) {\n  return 'user/' + query.user + '/hidden.json';\n};\n\nexport default SavedOrHiddenEndpoint(getPath, 'api/unhide', 'api/hide');"
    },
    {
      "id": 24,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PostsEndpoint.js",
      "name": "./src/apis/PostsEndpoint.js",
      "index": 32,
      "index2": 33,
      "size": 3251,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 54,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/PostsFromSubreddit.es6.js",
          "module": "./src/collections/PostsFromSubreddit.es6.js",
          "moduleName": "./src/collections/PostsFromSubreddit.es6.js",
          "type": "harmony import",
          "userRequest": "../apis/PostsEndpoint",
          "loc": "12:0-50"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/PostsEndpoint",
          "loc": "22:0-49"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport some from 'lodash/some';\n\nimport apiRequest from '../apiBase/apiRequest';\nimport BadCaptchaError from '../apiBase/errors/BadCaptchaError';\nimport ValidationError from '../apiBase/errors/ValidationError';\nimport PostModel from '../models2/PostModel';\nimport { formatBaseContentQuery } from './BaseContentEndpoint';\n\nvar BAD_CAPTCHA = 'BAD_CAPTCHA';\n\nvar getPath = function getPath(query) {\n  if (query.user) {\n    return 'user/' + query.user + '/submitted.json';\n  } else if (query.id) {\n    return 'by_id/' + query.id + '.json';\n  } else if (query.ids) {\n    return 'by_id/' + query.ids.join(',') + '.json';\n  } else if (query.subredditName) {\n    if (query.sort) {\n      return 'r/' + query.subredditName + '/' + query.sort + '.json';\n    }\n    return 'r/' + query.subredditName + '.json';\n  } else if (query.multi) {\n    return 'user/' + query.multiUser + '/m/' + query.multi + '.json';\n  }\n\n  return (query.sort || 'hot') + '.json';\n};\n\nvar formatQuery = function formatQuery(query, method) {\n  formatBaseContentQuery(query, method);\n\n  if (method !== 'patch') {\n    query.feature = 'link_preview';\n    query.sr_detail = 'true';\n  }\n\n  if (method === 'del') {\n    query._method = 'post';\n  }\n\n  return query;\n};\n\nvar formatPostData = function formatPostData(data) {\n  var postData = {\n    api_type: 'json',\n    thing_id: data.thingId,\n    title: data.title,\n    kind: data.kind,\n    sendreplies: data.sendreplies,\n    sr: data.sr,\n    iden: data.iden,\n    'g-recaptcha-response': data.gRecaptchaResponse,\n    resubmit: data.resubmit\n  };\n\n  if (data.text) {\n    postData.text = data.text;\n  } else if (data.url) {\n    postData.url = data.url;\n  }\n\n  return postData;\n};\n\nvar handleGet = function handleGet(apiResponse) {\n  var data = apiResponse.response.body.data;\n\n\n  if (data && data.children && data.children[0]) {\n    if (data.children.length === 1) {\n      apiResponse.addResult(PostModel.fromJSON(data.children[0].data));\n    } else {\n      data.children.forEach(function (c) {\n        return apiResponse.addResult(PostModel.fromJSON(c.data));\n      });\n    }\n  }\n\n  return apiResponse;\n};\n\nexport default {\n  get: function get(apiOptions, _query) {\n    var path = getPath(_query);\n    var query = formatQuery(_extends({ raw_json: 1 }, _query), 'get');\n\n    return apiRequest(apiOptions, 'GET', path, { query: query }).then(handleGet);\n  },\n  post: function post(apiOptions, data) {\n    var path = 'api/submit';\n    var query = formatPostData(data);\n\n    return apiRequest(apiOptions, 'POST', path, { query: query }).then(function (apiResponse) {\n      var json = apiResponse.response.body.json;\n\n      if (json.errors.length && some(json.errors, function (e) {\n        return e[0] === BAD_CAPTCHA;\n      })) {\n        throw new BadCaptchaError(data.gRecaptchaResponse, json.captcha, json.errors);\n      } else if (json.errors.length) {\n        throw new ValidationError(path, json.errors, 200);\n      } else {\n        return apiResponse.response.body;\n      }\n    });\n  }\n};"
    },
    {
      "id": 25,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedEndpoint.es6.js",
      "name": "./src/apis/SavedEndpoint.es6.js",
      "index": 48,
      "index2": 47,
      "size": 224,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 29,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SavedPostsAndComments.es6.js",
          "module": "./src/collections/SavedPostsAndComments.es6.js",
          "moduleName": "./src/collections/SavedPostsAndComments.es6.js",
          "type": "harmony import",
          "userRequest": "../apis/SavedEndpoint",
          "loc": "12:0-50"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/SavedEndpoint",
          "loc": "31:0-49"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import SavedOrHiddenEndpoint from './SavedAndHiddenCommon';\n\nvar getPath = function getPath(query) {\n  return 'user/' + query.user + '/saved.json';\n};\n\nexport default SavedOrHiddenEndpoint(getPath, 'api/unsave', 'api/save');"
    },
    {
      "id": 26,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SearchEndpoint.js",
      "name": "./src/apis/SearchEndpoint.js",
      "index": 49,
      "index2": 48,
      "size": 1877,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 55,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SearchQuery.es6.js",
          "module": "./src/collections/SearchQuery.es6.js",
          "moduleName": "./src/collections/SearchQuery.es6.js",
          "type": "harmony import",
          "userRequest": "../apis/SearchEndpoint",
          "loc": "16:0-52"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/SearchEndpoint",
          "loc": "32:0-51"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport { runQuery } from '../apiBase/APIRequestUtils';\n\nimport PostModel from '../models2/PostModel';\nimport Subreddit from '../models2/Subreddit';\nimport { POST_TYPE } from '../models2/thingTypes';\n\nvar getPath = function getPath(query) {\n  var path = '';\n\n  if (query.subreddit) {\n    path = 'r/' + query.subreddit + '/';\n  }\n\n  return path + 'search.json';\n};\n\nvar formatQuery = function formatQuery(query) {\n  if (query.subreddit) {\n    query.restrict_sr = 'on';\n    delete query.subreddit;\n  }\n\n  return query;\n};\n\nvar listsFromResponse = function listsFromResponse(res) {\n  var body = res.body;\n\n  if (!body) {\n    return [];\n  }\n\n  // If only one type is returned body will be an object;\n  return Array.isArray(body) ? body : [body];\n};\n\nvar parseBody = function parseBody(res, apiResponse) {\n  var lists = listsFromResponse(res);\n\n  lists.forEach(function (listing) {\n    if (listing.data.children.length) {\n      if (listing.data.children[0].kind === POST_TYPE) {\n        listing.data.children.forEach(function (link) {\n          apiResponse.addResult(PostModel.fromJSON(link.data));\n        });\n\n        apiResponse.meta.after = listing.data.after;\n        apiResponse.meta.before = listing.data.before;\n      } else {\n        listing.data.children.forEach(function (subreddit) {\n          apiResponse.addResult(Subreddit.fromJSON(subreddit.data));\n        });\n      }\n    }\n  });\n};\n\nexport default {\n  get: function get(apiOptions, query) {\n    var path = getPath(query);\n    var apiQuery = formatQuery(_extends({}, query));\n\n    return runQuery(apiOptions, 'get', path, apiQuery, query, parseBody);\n  }\n};"
    },
    {
      "id": 27,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditEndpoint.es6.js",
      "name": "./src/apis/SubredditEndpoint.es6.js",
      "index": 52,
      "index2": 51,
      "size": 3532,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 56,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SubredditLists.js",
          "module": "./src/collections/SubredditLists.js",
          "moduleName": "./src/collections/SubredditLists.js",
          "type": "harmony import",
          "userRequest": "../apis/SubredditEndpoint",
          "loc": "13:0-58"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/SubredditEndpoint",
          "loc": "36:0-57"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport pick from 'lodash/pick';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { runQuery, validateData } from '../apiBase/APIRequestUtils';\nimport Subreddit from '../models2/Subreddit';\n\nvar DEFAULT_SUBREDDIT_OPTIONS = {\n  allow_top: true,\n  collapse_deleted_comments: false,\n  comment_score_hide_mins: 0,\n  description: '',\n  exclude_banned_modqueue: false,\n  'header-title': '',\n  hide_ads: false,\n  lang: 'en',\n  link_type: 'any',\n  name: '',\n  over_18: false,\n  public_description: '',\n  public_traffic: false,\n  show_media: true,\n  spam_comments: 'low',\n  spam_links: 'high',\n  spam_selfposts: 'high',\n  sr: '',\n  submission_type: '',\n  submit_link_label: '',\n  submit_text: '',\n  submit_text_label: '',\n  suggested_comment_sort: 'confidence',\n  title: '',\n  type: 'public',\n  wiki_edit_age: 0,\n  wiki_edit_karma: 100,\n  wikimode: 'disabled'\n};\n\nvar requestPath = 'api/site_admin';\n\nvar getPath = function getPath(query) {\n  if (query.id && query.view === 'mod') {\n    return 'r/' + query.id + '/about/edit.json';\n  }\n\n  if (query.id) {\n    return 'r/' + query.id + '/about.json';\n  }\n\n  return 'subreddits/' + (query.sort || 'default') + '.json';\n};\n\nvar formatQuery = function formatQuery(query, method) {\n  if (method !== 'get') {\n    query.api_type = 'json';\n  }\n\n  return query;\n};\n\nvar parseBody = function parseBody(res, apiResponse) {\n  var body = res.body;\n\n\n  if (body.data && Array.isArray(body.data.children)) {\n    body.data.children.forEach(function (c) {\n      return apiResponse.addResult(Subreddit.fromJSON(c.data));\n    });\n    // sometimes, we get back empty object and 200 for invalid sorts like\n    // `mine` when logged out\n  } else if (!isEmpty(body)) {\n    apiResponse.addResult(Subreddit.fromJSON(body.data || body));\n  }\n};\n\nvar get = function get(apiOptions, query) {\n  var path = getPath(query);\n  var apiQuery = formatQuery(_extends({}, query));\n\n  return runQuery(apiOptions, 'get', path, apiQuery, query, parseBody);\n};\n\nvar patch = function patch(apiOptions, data) {\n  // If the data doesn't have all of the keys, get the full subreddit data\n  // and then merge in the changes and submit _that_. The API requires the\n  // full object be sent.\n  if (Object.keys(data).sort() !== Subreddit.fields) {\n    return new Promise(function (resolve, reject) {\n      get(apiOptions, {\n        id: data.id,\n        view: 'mod'\n      }).then(function (apiResponse) {\n        if (!apiResponse.results.length === 1) {\n          reject();\n        }\n        var sub = apiResponse.getModelFromRecord(apiResponse.results[0]);\n\n        var postData = pick(_extends({}, DEFAULT_SUBREDDIT_OPTIONS, sub, data, {\n          sr: sub.name\n        }), Object.keys(DEFAULT_SUBREDDIT_OPTIONS));\n\n        return post(apiOptions, postData);\n      }, reject);\n    });\n  }\n\n  return post(apiOptions, data);\n};\n\nvar post = function post(apiOptions, data) {\n  var postData = pick(_extends({}, DEFAULT_SUBREDDIT_OPTIONS, data), Object.keys(DEFAULT_SUBREDDIT_OPTIONS));\n\n  return runQuery(apiOptions, 'post', requestPath, postData, data, parseBody);\n};\n\nvar put = function put(apiOptions, data) {\n  var modifiedData = _extends({}, data, { name: data.id });\n  return post(apiOptions, modifiedData);\n};\n\nexport default {\n  get: get,\n  patch: patch,\n  post: post,\n  put: put\n};"
    },
    {
      "id": 28,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/subscriptions.es6.js",
      "name": "./src/apis/subscriptions.es6.js",
      "index": 47,
      "index2": 44,
      "size": 732,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 7,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Subreddit.es6.js",
          "module": "./src/models2/Subreddit.es6.js",
          "moduleName": "./src/models2/Subreddit.es6.js",
          "type": "harmony import",
          "userRequest": "../apis/subscriptions",
          "loc": "13:0-50"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/subscriptions",
          "loc": "35:0-49"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import { runQuery, validateData } from '../apiBase/APIRequestUtils';\n\nvar path = 'api/subscribe';\n\nvar validator = function validator(data) {\n  return !!data.subreddit;\n};\n\nvar post = function post(apiOptions, data) {\n  validateData(data, 'post', 'subscriptions', validator);\n\n  var postData = {\n    sr: data.subreddit,\n    action: 'sub',\n    api_type: 'json'\n  };\n\n  return runQuery(apiOptions, 'post', path, postData, data);\n};\n\nvar del = function del(apiOptions, data) {\n  validateData(data, 'del', 'subscriptions', validator);\n\n  var postData = {\n    sr: data.subreddit,\n    action: 'unsub',\n    api_type: 'json'\n  };\n\n  return runQuery(apiOptions, 'post', path, postData, data);\n};\n\nexport default {\n  post: post,\n  del: del\n};"
    },
    {
      "id": 29,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SavedPostsAndComments.es6.js",
      "name": "./src/collections/SavedPostsAndComments.es6.js",
      "index": 65,
      "index2": 63,
      "size": 3174,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 53,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/HiddenPostsAndComments.es6.js",
          "module": "./src/collections/HiddenPostsAndComments.es6.js",
          "moduleName": "./src/collections/HiddenPostsAndComments.es6.js",
          "type": "harmony import",
          "userRequest": "./SavedPostsAndComments",
          "loc": "7:0-60"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./collections/SavedPostsAndComments",
          "loc": "139:0-72"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport Listing from './Listing';\nimport SavedEndpoint from '../apis/SavedEndpoint';\n\nvar SavedPostsAndComments = function (_Listing) {\n  _inherits(SavedPostsAndComments, _Listing);\n\n  function SavedPostsAndComments() {\n    _classCallCheck(this, SavedPostsAndComments);\n\n    return _possibleConstructorReturn(this, (SavedPostsAndComments.__proto__ || Object.getPrototypeOf(SavedPostsAndComments)).apply(this, arguments));\n  }\n\n  _createClass(SavedPostsAndComments, [{\n    key: 'postsAndComments',\n    get: function get() {\n      return this.apiResponse.results.map(this.apiResponse.getModelFromRecord);\n    }\n  }], [{\n    key: 'fetch',\n    value: function fetch(apiOptions, userOrOptions) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (typeof userOrOptions === 'string') {\n        options.user = userOrOptions;\n      } else {\n        options = userOrOptions || {};\n      }\n\n      return _get(SavedPostsAndComments.__proto__ || Object.getPrototypeOf(SavedPostsAndComments), 'fetch', this).call(this, apiOptions, options);\n    }\n  }]);\n\n  return SavedPostsAndComments;\n}(Listing);\n\nSavedPostsAndComments.endpoint = SavedEndpoint;\nexport default SavedPostsAndComments;"
    },
    {
      "id": 30,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Account.es6.js",
      "name": "./src/models2/Account.es6.js",
      "index": 36,
      "index2": 34,
      "size": 3130,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 48,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/accounts.es6.js",
          "module": "./src/apis/accounts.es6.js",
          "moduleName": "./src/apis/accounts.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/Account",
          "loc": "4:0-41"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./models2/Account",
          "loc": "127:0-40"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport RedditModel from './RedditModel';\n\nimport { ACCOUNT } from './thingTypes';\n\nvar T = RedditModel.Types;\n\nvar Subreddit = function (_RedditModel) {\n  _inherits(Subreddit, _RedditModel);\n\n  function Subreddit() {\n    _classCallCheck(this, Subreddit);\n\n    return _possibleConstructorReturn(this, (Subreddit.__proto__ || Object.getPrototypeOf(Subreddit)).apply(this, arguments));\n  }\n\n  _createClass(Subreddit, [{\n    key: 'makeUUID',\n    value: function makeUUID(data) {\n      return data.name;\n    }\n  }]);\n\n  return Subreddit;\n}(RedditModel);\n\nSubreddit.type = ACCOUNT;\nSubreddit.PROPERTIES = {\n  commentKarma: T.number,\n  createdUTC: T.number,\n  features: T.nop,\n  goldCreddits: T.number,\n  goldExpiration: T.number,\n  hasMail: T.bool,\n  hasModMail: T.bool,\n  hasVerifiedEmail: T.bool,\n  hideFromRobots: T.bool,\n  id: T.string,\n  inBeta: T.bool,\n  inboxCount: T.number,\n  isEmployee: T.bool,\n  isGold: T.bool,\n  isMod: T.bool,\n  isSuspended: T.bool,\n  linkKarma: T.number,\n  loid: T.string,\n  loidCreated: T.number,\n  name: T.string,\n  over18: T.bool,\n  suspensionExpirationUTC: T.number\n};\nSubreddit.API_ALIASES = {\n  comment_karm: 'commentKarma',\n  created_utc: 'createdUTC',\n  gold_creddits: 'goldCreddits',\n  gold_expiration: 'goldExpiration',\n  has_mail: 'hasMail',\n  has_mod_mail: 'hasModMail',\n  has_verified_email: 'hasVerifiedEmail',\n  hide_from_robots: 'hideFromRobots',\n  in_beta: 'inBeta',\n  is_employee: 'isEmployee',\n  is_gold: 'isGold',\n  is_mod: 'isMod',\n  is_suspended: 'isSuspended',\n  link_karma: 'linkKarma',\n  loid_created: 'loidCreated',\n  over_18: 'over18',\n  suspension_expiration_utc: 'suspensionExpirationUTC'\n};\nexport default Subreddit;"
    },
    {
      "id": 31,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Preferences.es6.js",
      "name": "./src/models2/Preferences.es6.js",
      "index": 43,
      "index2": 41,
      "size": 5546,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 42,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PreferencesEndpoint.es6.js",
          "module": "./src/apis/PreferencesEndpoint.es6.js",
          "moduleName": "./src/apis/PreferencesEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/Preferences",
          "loc": "9:0-49"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./models2/Preferences",
          "loc": "130:0-48"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport RedditModel from './RedditModel';\nvar T = RedditModel.Types;\n\nvar PreferencesModel = function (_RedditModel) {\n  _inherits(PreferencesModel, _RedditModel);\n\n  function PreferencesModel() {\n    _classCallCheck(this, PreferencesModel);\n\n    return _possibleConstructorReturn(this, (PreferencesModel.__proto__ || Object.getPrototypeOf(PreferencesModel)).apply(this, arguments));\n  }\n\n  _createClass(PreferencesModel, [{\n    key: 'makeUUID',\n    value: function makeUUID(data) {\n      return 'preferences'; // there's only one preferences object for a user\n      // so the id is constant. Probably shouldn't use this.\n    }\n  }]);\n\n  return PreferencesModel;\n}(RedditModel);\n\nPreferencesModel.type = 'preferences';\nPreferencesModel.PROPERTIES = {\n  affiliateLinks: T.bool,\n  allowClicktracking: T.bool,\n  beta: T.bool,\n  clickgadget: T.bool,\n  collapseReadMessages: T.bool,\n  compress: T.bool,\n  credditAutorenew: T.bool,\n  defaultCommentSort: T.string, // It would be nice to have T.oneOf like react here\n  // as it's one of 'confidence', 'old', 'top', 'qa', 'controversial', 'new',\n  defaultThemeSr: T.string,\n  domainDetails: T.bool,\n  emailMessages: T.bool,\n  enableDefaultThemes: T.bool,\n  hideAds: T.bool,\n  hideDowns: T.bool,\n  hideFromRobots: T.bool,\n  hideLocationbar: T.bool,\n  hideUps: T.bool,\n  highlightControversial: T.bool,\n  highlightNewComments: T.bool,\n  ignoreSuggestedSort: T.bool,\n  labelNsfw: T.bool,\n  lang: T.string,\n  legacySearch: T.bool,\n  markMessagesRead: T.bool,\n  media: T.string, // Another case for T.oneOf,\n  // 'on', 'off', 'subreddit'\n  minCommentScore: T.number, // T.number should maybe have a T.range version\n  // -- this can only be between -100 and 100\n  minLinkScore: T.number, // same as above\n  monitorMentions: T.bool,\n  newWindow: T.bool,\n  noProfanity: T.bool,\n  numComments: T.number, // in range 1 and 500\n  numsites: T.number, // in range 1 and 500\n  organic: T.bool,\n  otherTheme: T.string, // subreddit name\n  over18: T.bool,\n  privateFeeds: T.bool,\n  publicVotes: T.bool,\n  research: T.bool,\n  showFlair: T.bool,\n  showGoldExpiration: T.bool,\n  showLinkFlair: T.bool,\n  showPromote: T.bool,\n  showStylesheets: T.bool,\n  showTrending: T.bool,\n  storeVisits: T.bool,\n  themeSelector: T.string, // subreddit name\n  threadedMessages: T.bool,\n  threadedModmail: T.bool,\n  useGlobalDefaults: T.bool\n};\nPreferencesModel.API_ALIASES = {\n  affiliate_links: 'affiliateLinks',\n  allow_clicktracking: 'allowClicktracking',\n  beta: 'beta',\n  clickgadget: 'clickgadget',\n  collapse_read_messages: 'collapseReadMessages',\n  compress: 'compress',\n  creddit_autorenew: 'credditAutorenew',\n  default_comment_sort: 'defaultCommentSort',\n  default_theme_sr: 'defaultThemeSr',\n  domain_details: 'domainDetails',\n  email_messages: 'emailMessages',\n  enable_default_themes: 'enableDefaultThemes',\n  hide_ads: 'hideAds',\n  hide_downs: 'hideDowns',\n  hide_from_robots: 'hideFromRobots',\n  hide_locationbar: 'hideLocationbar',\n  hide_ups: 'hideUps',\n  highlight_controversial: 'highlightControversial',\n  highlight_new_comments: 'highlightNewComments',\n  ignore_suggested_sort: 'ignoreSuggestedSort',\n  label_nsfw: 'labelNsfw',\n  lang: 'lang',\n  legacy_search: 'legacySearch',\n  mark_messages_read: 'markMessagesRead',\n  media: 'media',\n  min_comment_score: 'minCommentScore',\n  min_link_score: 'minLinkScore',\n  monitor_mentions: 'monitorMentions',\n  newwindow: 'newWindow',\n  no_profanity: 'noProfanity',\n  num_comments: 'numComments',\n  numsites: 'numsites',\n  organic: 'organic',\n  other_theme: 'otherTheme',\n  over_18: 'over18',\n  private_feeds: 'privateFeeds',\n  public_votes: 'publicVotes',\n  research: 'research',\n  show_flair: 'showFlair',\n  show_gold_expiration: 'showGoldExpiration',\n  show_link_flair: 'showLinkFlair',\n  show_promote: 'showPromote',\n  show_stylesheets: 'showStylesheets',\n  show_trending: 'showTrending',\n  store_visits: 'storeVisits',\n  themeSelector: 'themeSelector',\n  threaded_messages: 'threadedMessages',\n  threaded_modmail: 'threadedModmail',\n  use_global_defaults: 'useGlobalDefaults'\n};\nexport default PreferencesModel;"
    },
    {
      "id": 32,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/Wiki.es6.js",
      "name": "./src/models2/Wiki.es6.js",
      "index": 56,
      "index2": 54,
      "size": 2370,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 51,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/wikis.es6.js",
          "module": "./src/apis/wikis.es6.js",
          "moduleName": "./src/apis/wikis.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/Wiki",
          "loc": "4:0-35"
        },
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./models2/Wiki",
          "loc": "132:0-34"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport RedditModel from './RedditModel';\nimport Record from '../apiBase/Record';\n\nimport { WIKI } from './thingTypes';\n\nvar T = RedditModel.Types;\n\nvar Wiki = function (_RedditModel) {\n  _inherits(Wiki, _RedditModel);\n\n  function Wiki() {\n    _classCallCheck(this, Wiki);\n\n    return _possibleConstructorReturn(this, (Wiki.__proto__ || Object.getPrototypeOf(Wiki)).apply(this, arguments));\n  }\n\n  _createClass(Wiki, [{\n    key: 'makeUUID',\n    value: function makeUUID(data) {\n      return data.path;\n    }\n  }]);\n\n  return Wiki;\n}(RedditModel);\n\nWiki.type = WIKI;\nWiki.PROPERTIES = {\n  contentHTML: T.string,\n  contentMD: T.string,\n  path: T.string,\n  mayRevise: T.bool,\n  revisionBy: T.nop,\n  revisionDate: T.number\n};\nWiki.API_ALIASES = {\n  content_html: 'contentHTML',\n  content_md: 'contentMD',\n  may_revise: 'mayRevise',\n  revision_by: 'revisionBy',\n  revision_date: 'revisionDate'\n};\nexport default Wiki;"
    },
    {
      "id": 33,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/BaseContentEndpoint.js",
      "name": "./src/apis/BaseContentEndpoint.js",
      "index": 15,
      "index2": 14,
      "size": 2672,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
      "issuerId": 16,
      "issuerName": "./src/apis/CommentsEndpoint.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 16,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
          "module": "./src/apis/CommentsEndpoint.es6.js",
          "moduleName": "./src/apis/CommentsEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "./BaseContentEndpoint",
          "loc": "6:0-63"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PostsEndpoint.js",
          "module": "./src/apis/PostsEndpoint.js",
          "moduleName": "./src/apis/PostsEndpoint.js",
          "type": "harmony import",
          "userRequest": "./BaseContentEndpoint",
          "loc": "9:0-63"
        }
      ],
      "usedExports": [
        "formatBaseContentQuery"
      ],
      "providedExports": [
        "formatBaseContentQuery",
        "patchPath",
        "deletePath",
        "patch"
      ],
      "source": "var _this = this;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport pick from 'lodash/pick';\n\nimport NoModelError from '../apiBase/errors/NoModelError';\n\nvar MOD_ACTION_MAP = {\n  approved: function approved(t, data) {\n    return [t ? 'api/approve' : 'api/remove', pick(data, ['id', 'spam'])];\n  },\n  removed: function removed(t, data) {\n    return [t ? 'api/remove' : 'api/approve', pick(data, ['id', 'spam'])];\n  },\n  distinguished: function distinguished(_, data) {\n    return ['api/distinguish', {\n      id: data.id,\n      how: data.distinguished\n    }];\n  },\n  ignoreReports: function ignoreReports(_, data) {\n    return ['api/ignore_reports', {\n      id: data.id,\n      spam: data.isSpam\n    }];\n  }\n};\n\nexport var formatBaseContentQuery = function formatBaseContentQuery(query, method) {\n  if (method !== 'patch') {\n    query.feature = 'link_preview';\n    query.sr_detail = 'true';\n  }\n\n  if (method === 'del') {\n    query._method = 'post';\n  }\n\n  return query;\n};\n\nexport var patchPath = function patchPath() {\n  return 'api/editusertext';\n};\n\nexport var deletePath = function deletePath() {\n  return 'api/del';\n};\n\nexport var patch = function patch(apiOptions, data) {\n  if (!data) {\n    throw new NoModelError('/api/editusertext');\n  }\n\n  var promises = [];\n\n  Object.keys(data).map(function (k) {\n    var prop = MOD_ACTION_MAP[k];\n    var val = data[k];\n\n    if (prop) {\n      (function () {\n        var _prop = prop(val, data);\n\n        var _prop2 = _slicedToArray(_prop, 2);\n\n        var api = _prop2[0];\n        var json = _prop2[1];\n\n        promises.push(new Promise(function (r, x) {\n          _this.rawSend('post', api, json, function (err, res, req) {\n            if (err || !res.ok) {\n              x(err || res);\n            }\n\n            r(res, req);\n          });\n        }));\n      })();\n    }\n  });\n\n  if (data.text) {\n    var json = {\n      api_type: 'json',\n      thing_id: data.id,\n      text: data.text,\n      _method: 'post'\n    };\n\n    promises.push(_this.save('patch', json));\n  }\n\n  return Promise.all(promises);\n};"
    },
    {
      "id": 34,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedAndHiddenCommon.es6.js",
      "name": "./src/apis/SavedAndHiddenCommon.es6.js",
      "index": 40,
      "index2": 38,
      "size": 1842,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/HiddenEndpoint.es6.js",
      "issuerId": 23,
      "issuerName": "./src/apis/HiddenEndpoint.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 23,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/HiddenEndpoint.es6.js",
          "module": "./src/apis/HiddenEndpoint.es6.js",
          "moduleName": "./src/apis/HiddenEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "./SavedAndHiddenCommon",
          "loc": "1:0-59"
        },
        {
          "moduleId": 25,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SavedEndpoint.es6.js",
          "module": "./src/apis/SavedEndpoint.es6.js",
          "moduleName": "./src/apis/SavedEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "./SavedAndHiddenCommon",
          "loc": "1:0-59"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import has from 'lodash/has';\nimport omit from 'lodash/omit';\n\nimport { runQuery, validateData } from '../apiBase/APIRequestUtils';\nimport CommentModel from '../models2/CommentModel';\nimport PostModel from '../models2/PostModel';\n\nvar CONSTRUCTORS = {\n  t1: CommentModel,\n  t3: PostModel\n};\n\nvar parseBody = function parseBody(res, apiResponse) {\n  var body = res.body;\n\n  if (!has(body, 'data.children')) {\n    return;\n  }\n\n  var things = body.data.children;\n\n  things.forEach(function (t) {\n    apiResponse.addResult(CONSTRUCTORS[t.kind].fromJSON(t.data));\n  });\n};\n\nvar formatQuery = function formatQuery(query) {\n  return omit(query, 'user');\n};\n\nvar validator = function validator(data) {\n  return !!data.id;\n};\n\nvar dataFromQuery = function dataFromQuery(data) {\n  return {\n    id: data.id,\n    category: data.category\n  };\n};\n\nvar _get = function _get(apiOptions, query, path) {\n  var apiQuery = formatQuery(query);\n\n  return runQuery(apiOptions, 'get', path, apiQuery, query, parseBody);\n};\n\nvar _del = function _del(apiOptions, query, path) {\n  validateData(query, 'del', 'saved', validator);\n  var postData = dataFromQuery(query);\n\n  return runQuery(apiOptions, 'post', path, postData, query, parseBody);\n};\n\nvar _post = function _post(apiOptions, query, path) {\n  validateData(query, 'post', 'saved', validator);\n  var postData = formatQuery(query);\n\n  return runQuery(apiOptions, 'post', path, postData, query, parseBody);\n};\n\nexport default (function (getPathFn, delPath, postPath) {\n  return {\n    get: function get(apiOptions, query) {\n      var path = getPathFn(query);\n      return _get(apiOptions, query, path);\n    },\n    del: function del(apiOptions, query) {\n      return _del(apiOptions, query, delPath);\n    },\n    post: function post(apiOptions, query) {\n      return _post(apiOptions, query, postPath);\n    }\n  };\n});"
    },
    {
      "id": 35,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/mixin.js",
      "name": "./src/models2/mixins/mixin.js",
      "index": 27,
      "index2": 23,
      "size": 355,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/votable.js",
      "issuerId": 37,
      "issuerName": "./src/models2/mixins/votable.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 36,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/replyable.js",
          "module": "./src/models2/mixins/replyable.js",
          "moduleName": "./src/models2/mixins/replyable.js",
          "type": "harmony import",
          "userRequest": "./mixin",
          "loc": "1:0-28"
        },
        {
          "moduleId": 37,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/votable.js",
          "module": "./src/models2/mixins/votable.js",
          "moduleName": "./src/models2/mixins/votable.js",
          "type": "harmony import",
          "userRequest": "./mixin",
          "loc": "3:0-28"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "export default (function (cls, fns) {\n  Object.keys(fns).map(function (k) {\n    cls.prototype[k] = fns[k];\n  });\n\n  var oldConstructor = cls.constructor;\n  cls.constructor = function () {\n    var _this = this;\n\n    Object.keys(fns).map(function (k) {\n      _this[k] = _this[k].bind(_this);\n    });\n\n    oldConstructor.apply(undefined, arguments);\n  };\n});"
    },
    {
      "id": 36,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/replyable.js",
      "name": "./src/models2/mixins/replyable.js",
      "index": 29,
      "index2": 27,
      "size": 307,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/CommentModel.es6.js",
      "issuerId": 5,
      "issuerName": "./src/models2/CommentModel.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/PostModel.es6.js",
          "module": "./src/models2/PostModel.es6.js",
          "moduleName": "./src/models2/PostModel.es6.js",
          "type": "harmony import",
          "userRequest": "./mixins/replyable",
          "loc": "10:0-43"
        },
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/CommentModel.es6.js",
          "module": "./src/models2/CommentModel.es6.js",
          "moduleName": "./src/models2/CommentModel.es6.js",
          "type": "harmony import",
          "userRequest": "./mixins/replyable",
          "loc": "16:0-43"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "reply",
        "default"
      ],
      "source": "import mixin from './mixin';\nimport comment from '../../apis/CommentsEndpoint';\n\nexport function reply(apiOptions, text) {\n  var oldModel = this;\n\n  return comment.post(apiOptions, {\n    thingId: this.uuid,\n    text: text\n  });\n};\n\nexport default (function (cls) {\n  return mixin(cls, { reply: reply });\n});"
    },
    {
      "id": 37,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/votable.js",
      "name": "./src/models2/mixins/votable.js",
      "index": 26,
      "index2": 25,
      "size": 2228,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/CommentModel.es6.js",
      "issuerId": 5,
      "issuerName": "./src/models2/CommentModel.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/PostModel.es6.js",
          "module": "./src/models2/PostModel.es6.js",
          "moduleName": "./src/models2/PostModel.es6.js",
          "type": "harmony import",
          "userRequest": "./mixins/votable",
          "loc": "9:0-39"
        },
        {
          "moduleId": 5,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/CommentModel.es6.js",
          "module": "./src/models2/CommentModel.es6.js",
          "moduleName": "./src/models2/CommentModel.es6.js",
          "type": "harmony import",
          "userRequest": "./mixins/votable",
          "loc": "15:0-39"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "upvote",
        "downvote",
        "_vote",
        "default"
      ],
      "source": "function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nimport mixin from './mixin';\nimport votes from '../../apis/VoteEndpoint';\n\nexport function upvote(apiOptions) {\n  // If already upvoted, cancel out the upvote.\n  return this._vote(apiOptions, 1);\n}\n\nexport function downvote(apiOptions) {\n  // If already downvoted, cancel out the upvote.\n  return this._vote(apiOptions, -1);\n}\n\nexport function _vote(apiOptions, direction) {\n  var _this = this;\n\n  var oldModel = this;\n\n  var undoingVote = direction === this.likes;\n  var newLikes = undoingVote ? 0 : direction;\n  var newScore = undoingVote ? this.score - direction : this.score - this.likes + direction;\n\n  var stub = this.stub({\n    likes: newLikes,\n    score: newScore\n  }, function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var endpoint;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              endpoint = direction === 0 ? votes.del : votes.post;\n              _context.next = 4;\n              return endpoint(apiOptions, { thingId: oldModel.name, direction: direction });\n\n            case 4:\n              return _context.abrupt('return', stub);\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context['catch'](0);\n              throw oldModel;\n\n            case 10:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this, [[0, 7]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  return stub;\n}\n\nexport default (function (cls) {\n  return mixin(cls, { upvote: upvote, downvote: downvote, _vote: _vote });\n});"
    },
    {
      "id": 38,
      "identifier": "external \"pick\"",
      "name": "external \"pick\"",
      "index": 16,
      "index2": 13,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditEndpoint.es6.js",
      "issuerId": 27,
      "issuerName": "./src/apis/SubredditEndpoint.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 27,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditEndpoint.es6.js",
          "module": "./src/apis/SubredditEndpoint.es6.js",
          "moduleName": "./src/apis/SubredditEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "lodash/pick",
          "loc": "3:0-31"
        },
        {
          "moduleId": 33,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/BaseContentEndpoint.js",
          "module": "./src/apis/BaseContentEndpoint.js",
          "moduleName": "./src/apis/BaseContentEndpoint.js",
          "type": "harmony import",
          "userRequest": "lodash/pick",
          "loc": "5:0-31"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": null
    },
    {
      "id": 39,
      "identifier": "external \"superagent\"",
      "name": "external \"superagent\"",
      "index": 2,
      "index2": 0,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
      "issuerId": 2,
      "issuerName": "./src/apiBase/APIRequestUtils.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/apiRequest.js",
          "module": "./src/apiBase/apiRequest.js",
          "moduleName": "./src/apiBase/apiRequest.js",
          "type": "harmony import",
          "userRequest": "superagent",
          "loc": "3:0-36"
        },
        {
          "moduleId": 2,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
          "module": "./src/apiBase/APIRequestUtils.es6.js",
          "moduleName": "./src/apiBase/APIRequestUtils.es6.js",
          "type": "harmony import",
          "userRequest": "superagent",
          "loc": "3:0-36"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": null
    },
    {
      "id": 40,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/EditUserTextEndpoint.js",
      "name": "./src/apis/EditUserTextEndpoint.js",
      "index": 38,
      "index2": 37,
      "size": 1199,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/EditUserTextEndpoint",
          "loc": "26:0-63"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import apiRequest from '../apiBase/apiRequest';\nimport NoModelError from '../apiBase/errors/NoModelError';\nimport ValidationError from '../apiBase/errors/ValidationError';\n\nimport PostModel from '../models2/PostModel';\nimport CommentModel from '../models2/CommentModel';\n\nvar TYPE_MAP = {\n  t1: CommentModel,\n  t3: PostModel\n};\n\nvar ENDPOINT = '/api/editusertext';\n\nexport default {\n  post: function post(apiOptions) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var thingId = data.thingId;\n    var text = data.text;\n\n    if (!thingId || !text) {\n      throw new NoModelError(ENDPOINT);\n    }\n\n    var options = {\n      type: 'form',\n      query: {\n        raw_json: 1 },\n      body: {\n        api_type: 'json',\n        text: text,\n        thing_id: thingId\n      }\n    };\n\n    return apiRequest(apiOptions, 'POST', ENDPOINT, options).then(function (apiResponse) {\n      var json = apiResponse.response.body.json;\n\n      if (json.errors.length) {\n        throw new ValidationError(ENDPOINT, json.errors, apiResponse.response.status);\n      }\n\n      var thing = json.data.things[0];\n      return TYPE_MAP[thing.kind].fromJSON(thing.data);\n    });\n  }\n};"
    },
    {
      "id": 41,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/MessagesEndpoint.es6.js",
      "name": "./src/apis/MessagesEndpoint.es6.js",
      "index": 57,
      "index2": 57,
      "size": 3503,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/MessagesEndpoint",
          "loc": "40:0-55"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport has from 'lodash/has';\n\nimport apiRequest from '../apiBase/apiRequest';\nimport ValidationError from '../apiBase/errors/ValidationError';\n\nimport Comment from '../models2/CommentModel';\nimport Post from '../models2/PostModel';\nimport Message from '../models2/MessageModel';\n\nvar TYPE_MAP = {\n  't1': Comment,\n  't3': Post,\n  't4': Message\n};\n\nvar parseGetBody = function parseGetBody(apiResponse) {\n  var body = apiResponse.response.body;\n\n  body.data.children.forEach(function (c) {\n    var replies = [];\n    if (c.data.replies) {\n      c.data.replies.data.children.forEach(function (r) {\n        apiResponse.addModel(TYPE_MAP[r.kind].fromJSON(r.data));\n        replies.push(r.kind + '_' + r.data.id);\n      });\n    }\n\n    c.data.replies = replies;\n    apiResponse.addResult(TYPE_MAP[c.kind].fromJSON(c.data));\n  });\n\n  var _body$data = body.data;\n  var before = _body$data.before;\n  var after = _body$data.after;\n\n  apiResponse.meta = { before: before, after: after };\n\n  return apiResponse;\n};\n\nvar parsePostBody = function parsePostBody(apiResponse) {\n  var body = apiResponse.response.body;\n\n  if (has(body, 'json.errors') && body.json.errors.length) {\n    // There's a problem -- return the errors\n    var reqType = apiResponse.request.url.indexOf('compose') !== -1 ? 'compose' : 'reply';\n    throw new ValidationError('Message ' + reqType, body.json.errors, body.status);\n  } else if (has(body, 'json.data.things.0.data')) {\n    // We're replying to an existing thread -- the API gives us\n    // that message, so we return the model.\n    var message = body.json.data.things[0];\n    var model = TYPE_MAP[message.kind].fromJSON(message.data);\n    return model;\n  }\n\n  // New message thread -- API tells us nothing, so we return null\n  return null;\n};\n\nvar getPath = function getPath() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var subreddit = data.subreddit;\n  var type = data.type;\n  var thread = data.thread;\n\n  var sub = subreddit ? 'r/' + subreddit + '/' : '';\n  var id = thread ? '/' + thread : '';\n  return sub + 'message/' + type + id + '.json';\n};\n\nvar postPath = function postPath() {\n  var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var thingId = body.thingId;\n\n  if (!thingId) {\n    return 'api/compose';\n  }\n\n  // `api/comment` is intentional; message replies are treated as comments.\n  return 'api/comment';\n};\n\nvar translateData = function translateData(data) {\n  var ret = {\n    api_type: 'json',\n    raw_json: 1,\n    text: data.body\n  };\n\n  if (data.thingId) {\n    ret.thing_id = data.thingId;\n  }\n  if (data.to) {\n    ret.to = data.to;\n  }\n  if (data.subreddit) {\n    ret.from_sr = data.subreddit;\n  }\n  if (data.subject) {\n    ret.subject = data.subject;\n  }\n\n  return ret;\n};\n\nexport default {\n  get: function get(apiOptions, data) {\n    var path = getPath(data);\n    var query = _extends({}, data.query, { raw_json: 1 });\n\n    return apiRequest(apiOptions, 'GET', path, { query: query }).then(parseGetBody);\n  },\n  post: function post(apiOptions, data) {\n    var path = postPath(data);\n    var body = translateData(data);\n\n    return apiRequest(apiOptions, 'POST', path, { body: body, type: 'form' }).then(parsePostBody);\n  }\n};"
    },
    {
      "id": 42,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PreferencesEndpoint.es6.js",
      "name": "./src/apis/PreferencesEndpoint.es6.js",
      "index": 42,
      "index2": 42,
      "size": 2766,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/PreferencesEndpoint",
          "loc": "29:0-61"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _this = this;\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nimport { runQuery, runJson } from '../apiBase/APIRequestUtils';\n\nimport Preferences from '../models2/Preferences';\n\nvar PREFS_URL = '/api/v1/me/prefs';\n\n// We opt-out of using the automatic parsing from `runQuery` and `runJson`,\n// because the preferences object doesn't really make sense in the normalized\n// response model.\n\nexport default {\n  get: function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(apiOptions) {\n      var responseBody;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return runQuery(apiOptions, 'get', PREFS_URL, {}, {});\n\n            case 2:\n              responseBody = _context.sent;\n              return _context.abrupt('return', Preferences.fromJSON(responseBody || {}));\n\n            case 4:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }));\n\n    return function get(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n\n  patch: function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(apiOptions, changes) {\n      var data, responseBody;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = _extends({}, changes, {\n                api_type: 'json'\n              });\n              _context2.next = 3;\n              return runJson(apiOptions, 'patch', PREFS_URL, data);\n\n            case 3:\n              responseBody = _context2.sent;\n              return _context2.abrupt('return', Preferences.fromJSON(responseBody || {}));\n\n            case 5:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, _this);\n    }));\n\n    return function patch(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }()\n};"
    },
    {
      "id": 43,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/RecommendedSubreddits.es6.js",
      "name": "./src/apis/RecommendedSubreddits.es6.js",
      "index": 44,
      "index2": 46,
      "size": 813,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/RecommendedSubreddits",
          "loc": "30:0-65"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import isEmpty from 'lodash/isEmpty';\n\nimport apiRequest from '../apiBase/apiRequest';\nimport Subreddit from '../models2/Subreddit';\n\nvar parseBody = function parseBody(apiResponse) {\n  var body = apiResponse.response.body;\n\n\n  if (body.data && Array.isArray(body.data.children)) {\n    body.data.children.forEach(function (c) {\n      return apiResponse.addResult(Subreddit.fromJSON(c.data));\n    });\n    // sometimes, we get back empty object and 200 for invalid sorts like\n    // `mine` when logged out\n  } else if (!isEmpty(body)) {\n    apiResponse.addResult(Subreddit.fromJSON(body.data || body));\n  }\n\n  return apiResponse;\n};\n\nvar get = function get(apiOptions, query) {\n  return apiRequest(apiOptions, 'GET', 'api/similar_subreddits.json', { query: query }).then(parseBody);\n};\n\nexport default { get: get };"
    },
    {
      "id": 44,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SimilarPosts.es6.js",
      "name": "./src/apis/SimilarPosts.es6.js",
      "index": 50,
      "index2": 49,
      "size": 1100,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/SimilarPosts",
          "loc": "33:0-47"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport isEmpty from 'lodash/isEmpty';\n\nimport apiRequest from '../apiBase/apiRequest';\nimport PostModel from '../models2/PostModel';\n\nvar parseBody = function parseBody(apiResponse) {\n  var body = apiResponse.response.body;\n\n\n  if (body.data && Array.isArray(body.data.children)) {\n    body.data.children.forEach(function (c) {\n      return apiResponse.addResult(PostModel.fromJSON(c.data));\n    });\n    // sometimes, we get back empty object and 200 for invalid sorts like\n    // `mine` when logged out\n  } else if (!isEmpty(body)) {\n    apiResponse.addResult(PostModel.fromJSON(body.data || body));\n  }\n\n  return apiResponse;\n};\n\nvar get = function get(apiOptions, query) {\n  return apiRequest(apiOptions, 'GET', 'api/similar_links.json', { 'query': _extends({}, query, { raw_json: 1 }) }).then(parseBody);\n};\n\nexport default { get: get };"
    },
    {
      "id": 45,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditAutocomplete.es6.js",
      "name": "./src/apis/SubredditAutocomplete.es6.js",
      "index": 51,
      "index2": 50,
      "size": 294,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/SubredditAutocomplete",
          "loc": "34:0-65"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import { runForm } from '../apiBase/APIRequestUtils';\n\nvar PATH = '/api/search_reddit_names.json';\n\nexport default {\n  get: function get(apiOptions, searchTerm, over18) {\n    var query = { query: searchTerm, include_over_18: over18 };\n    return runForm(apiOptions, 'post', PATH, query);\n  }\n};"
    },
    {
      "id": 46,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditsByPost.es6.js",
      "name": "./src/apis/SubredditsByPost.es6.js",
      "index": 53,
      "index2": 52,
      "size": 1105,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/SubredditsByPost",
          "loc": "37:0-55"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport isEmpty from 'lodash/isEmpty';\n\nimport apiRequest from '../apiBase/apiRequest';\nimport Subreddit from '../models2/Subreddit';\n\nvar parseBody = function parseBody(apiResponse) {\n  var body = apiResponse.response.body;\n\n\n  if (body.data && Array.isArray(body.data.children)) {\n    body.data.children.forEach(function (c) {\n      return apiResponse.addResult(Subreddit.fromJSON(c.data));\n    });\n    // sometimes, we get back empty object and 200 for invalid sorts like\n    // `mine` when logged out\n  } else if (!isEmpty(body)) {\n    apiResponse.addResult(Subreddit.fromJSON(body.data || body));\n  }\n\n  return apiResponse;\n};\n\nvar get = function get(apiOptions, query) {\n  return apiRequest(apiOptions, 'GET', 'api/subreddits_by_link.json', { 'query': _extends({}, query, { raw_json: 1 }) }).then(parseBody);\n};\n\nexport default { get: get };"
    },
    {
      "id": 47,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/SubredditsToPostsByPost.es6.js",
      "name": "./src/apis/SubredditsToPostsByPost.es6.js",
      "index": 54,
      "index2": 53,
      "size": 1114,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/SubredditsToPostsByPost",
          "loc": "38:0-69"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport isEmpty from 'lodash/isEmpty';\n\nimport apiRequest from '../apiBase/apiRequest';\nimport PostModel from '../models2/PostModel';\n\nvar parseBody = function parseBody(apiResponse) {\n  var body = apiResponse.response.body;\n\n\n  if (body.data && Array.isArray(body.data.children)) {\n    body.data.children.forEach(function (c) {\n      return apiResponse.addResult(PostModel.fromJSON(c.data));\n    });\n    // sometimes, we get back empty object and 200 for invalid sorts like\n    // `mine` when logged out\n  } else if (!isEmpty(body)) {\n    apiResponse.addResult(PostModel.fromJSON(body.data || body));\n  }\n\n  return apiResponse;\n};\n\nvar get = function get(apiOptions, query) {\n  return apiRequest(apiOptions, 'GET', 'api/subreddits_to_links_by_link.json', { 'query': _extends({}, query, { raw_json: 1 }) }).then(parseBody);\n};\n\nexport default { get: get };"
    },
    {
      "id": 48,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/accounts.es6.js",
      "name": "./src/apis/accounts.es6.js",
      "index": 35,
      "index2": 35,
      "size": 1132,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/accounts",
          "loc": "24:0-47"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport apiRequest from '../apiBase/apiRequest';\nimport Account from '../models2/Account';\n\nvar getPath = function getPath(query) {\n  if (query.loggedOut) {\n    return 'api/me.json';\n  } else if (query.user === 'me') {\n    return 'api/v1/me';\n  }\n\n  return 'user/' + query.user + '/about.json';\n};\n\nvar parseGetBody = function parseGetBody(apiResponse) {\n  var body = apiResponse.response.body;\n\n\n  if (body) {\n    var data = _extends({\n      name: 'me', // me is reserved, this should only stay me in the logged out case\n      loid: body.loid,\n      loid_created: body.loid_created\n    }, body.data || body);\n\n    apiResponse.addResult(Account.fromJSON(data));\n  }\n\n  return apiResponse;\n};\n\nexport default {\n  get: function get(apiOptions, query) {\n    var path = getPath(query);\n\n    return apiRequest(apiOptions, 'GET', path, { query: query }).then(parseGetBody);\n  }\n};"
    },
    {
      "id": 49,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/activities.es6.js",
      "name": "./src/apis/activities.es6.js",
      "index": 37,
      "index2": 36,
      "size": 1239,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/activities",
          "loc": "25:0-51"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport { runQuery } from '../apiBase/APIRequestUtils';\n\nimport CommentModel from '../models2/CommentModel';\nimport PostModel from '../models2/PostModel';\n\nvar CONSTRUCTORS = {\n  t1: CommentModel,\n  t3: PostModel\n};\n\nvar getPath = function getPath(query) {\n  return 'user/' + query.user + '/' + query.activity + '.json';\n};\n\nvar formatQuery = function formatQuery(query) {\n  return _extends({}, query, {\n    feature: 'link_preview',\n    sr_detail: 'true'\n  });\n};\n\nvar parseBody = function parseBody(res, apiResponse) {\n  var body = res.body;\n\n\n  if (body) {\n    var activities = body.data.children;\n\n    activities.forEach(function (a) {\n      var constructor = CONSTRUCTORS[a.kind];\n      apiResponse.addResult(constructor.fromJSON(a.data));\n    });\n  }\n};\n\nexport default {\n  get: function get(apiOptions, query) {\n    var path = getPath(query);\n    var formattedQuery = formatQuery(query);\n\n    return runQuery(apiOptions, 'get', path, formattedQuery, query, parseBody);\n  }\n};"
    },
    {
      "id": 50,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/modTools.es6.js",
      "name": "./src/apis/modTools.es6.js",
      "index": 41,
      "index2": 40,
      "size": 581,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/modTools",
          "loc": "28:0-39"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import apiRequest from '../apiBase/apiRequest';\n\nvar remove = function remove(apiOptions, fullname, spam) {\n    // Remove a link, comment, or modmail message.\n    var body = {\n        id: fullname,\n        spam: spam\n    };\n\n    return apiRequest(apiOptions, 'POST', 'api/remove', { body: body, type: 'form' });\n};\n\nvar approve = function approve(apiOptions, fullname) {\n    // Approve a link or comment\n    var body = { id: fullname };\n    return apiRequest(apiOptions, 'POST', 'api/approve', { body: body, type: 'form' });\n};\n\nexport default { remove: remove, approve: approve };"
    },
    {
      "id": 51,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/wikis.es6.js",
      "name": "./src/apis/wikis.es6.js",
      "index": 55,
      "index2": 55,
      "size": 1218,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./apis/wikis",
          "loc": "39:0-41"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport { runQuery } from '../apiBase/APIRequestUtils';\nimport Wiki from '../models2/Wiki';\n\nvar getPath = function getPath(query) {\n  var subredditName = query.subredditName;\n  var path = query.path;\n\n  // Default to the index\n\n  if (!path) {\n    path = 'index';\n  }\n\n  // Strip trailing slash from the path\n  path = path.endsWith('/') ? path.slice(0, -1) : path;\n\n  if (subredditName) {\n    return 'r/' + subredditName + '/wiki/' + path;\n  } else {\n    return 'wiki/' + path;\n  }\n};\n\nvar parseGetBody = function parseGetBody(path) {\n  return function (res, apiResponse) {\n    var body = res.body;\n\n    if (body) {\n      var data = _extends({\n        path: path\n      }, body.data || body);\n\n      apiResponse.addResult(Wiki.fromJSON(data));\n    }\n  };\n};\n\nexport default {\n  get: function get(apiOptions, query) {\n    var path = getPath(query);\n    var url = path + '.json';\n\n    return runQuery(apiOptions, 'get', url, {}, query, parseGetBody(path));\n  }\n};"
    },
    {
      "id": 52,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/CommentsPage.es6.js",
      "name": "./src/collections/CommentsPage.es6.js",
      "index": 63,
      "index2": 62,
      "size": 5170,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./collections/CommentsPage",
          "loc": "136:0-54"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport Listing from './Listing';\nimport CommentsEndpoint from '../apis/CommentsEndpoint';\nimport NotImplementedError from '../apiBase/errors/NotImplementedError';\n\nvar CommentsPage = function (_Listing) {\n  _inherits(CommentsPage, _Listing);\n\n  function CommentsPage() {\n    _classCallCheck(this, CommentsPage);\n\n    return _possibleConstructorReturn(this, (CommentsPage.__proto__ || Object.getPrototypeOf(CommentsPage)).apply(this, arguments));\n  }\n\n  _createClass(CommentsPage, [{\n    key: 'replies',\n    value: function replies(comment) {\n      return comment.replies.map(this.apiResponse.getModelFromRecord);\n    }\n  }, {\n    key: 'nextResponse',\n    value: function () {\n      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw new NotImplementedError('comments collection pageing not supported yet');\n\n              case 1:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function nextResponse() {\n        return _ref.apply(this, arguments);\n      }\n\n      return nextResponse;\n    }()\n  }, {\n    key: 'prevResponse',\n    value: function () {\n      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throw new NotImplementedError('comments collection pageing not supported yet');\n\n              case 1:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function prevResponse() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return prevResponse;\n    }()\n  }, {\n    key: 'topLevelComments',\n    get: function get() {\n      return this.apiResponse.results.map(this.apiResponse.getModelFromRecord);\n    }\n  }], [{\n    key: 'fetch',\n    value: function fetch(apiOptions, id) {\n      if (typeof id === 'string') {\n        id = { id: id };\n      }\n\n      return _get(CommentsPage.__proto__ || Object.getPrototypeOf(CommentsPage), 'fetch', this).call(this, apiOptions, id);\n    }\n  }, {\n    key: 'fetchMoreChildren',\n    value: function fetchMoreChildren(apiOptions, comment) {\n      return _get(CommentsPage.__proto__ || Object.getPrototypeOf(CommentsPage), 'fetch', this).call(this, apiOptions, { ids: comment.children });\n    }\n  }]);\n\n  return CommentsPage;\n}(Listing);\n\nCommentsPage.endpoint = CommentsEndpoint;\nexport default CommentsPage;"
    },
    {
      "id": 53,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/HiddenPostsAndComments.es6.js",
      "name": "./src/collections/HiddenPostsAndComments.es6.js",
      "index": 64,
      "index2": 64,
      "size": 1529,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./collections/HiddenPostsAndComments",
          "loc": "137:0-74"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport SavedPostsAndComments from './SavedPostsAndComments';\nimport HiddenEndpoint from '../apis/HiddenEndpoint';\n\nvar HiddenPostsAndComments = function (_SavedPostsAndComment) {\n  _inherits(HiddenPostsAndComments, _SavedPostsAndComment);\n\n  function HiddenPostsAndComments() {\n    _classCallCheck(this, HiddenPostsAndComments);\n\n    return _possibleConstructorReturn(this, (HiddenPostsAndComments.__proto__ || Object.getPrototypeOf(HiddenPostsAndComments)).apply(this, arguments));\n  }\n\n  return HiddenPostsAndComments;\n}(SavedPostsAndComments);\n\nHiddenPostsAndComments.endpoint = HiddenEndpoint;\nexport default HiddenPostsAndComments;"
    },
    {
      "id": 54,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/PostsFromSubreddit.es6.js",
      "name": "./src/collections/PostsFromSubreddit.es6.js",
      "index": 66,
      "index2": 65,
      "size": 3172,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./collections/PostsFromSubreddit",
          "loc": "138:0-66"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport Listing from './Listing';\nimport PostsEndpoint from '../apis/PostsEndpoint';\n\nvar PostsFromSubreddit = function (_Listing) {\n  _inherits(PostsFromSubreddit, _Listing);\n\n  function PostsFromSubreddit() {\n    _classCallCheck(this, PostsFromSubreddit);\n\n    return _possibleConstructorReturn(this, (PostsFromSubreddit.__proto__ || Object.getPrototypeOf(PostsFromSubreddit)).apply(this, arguments));\n  }\n\n  _createClass(PostsFromSubreddit, [{\n    key: 'posts',\n    get: function get() {\n      return this.apiResponse.results.map(this.apiResponse.getModelFromRecord);\n    }\n  }], [{\n    key: 'fetch',\n    value: function fetch(apiOptions, subredditNameOrOptions) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (typeof subredditNameOrOptions === 'string') {\n        options.subredditName = subredditNameOrOptions;\n      } else {\n        options = subredditNameOrOptions || {};\n      }\n\n      return _get(PostsFromSubreddit.__proto__ || Object.getPrototypeOf(PostsFromSubreddit), 'fetch', this).call(this, apiOptions, options);\n    }\n  }]);\n\n  return PostsFromSubreddit;\n}(Listing);\n\nPostsFromSubreddit.endpoint = PostsEndpoint;\nexport default PostsFromSubreddit;"
    },
    {
      "id": 55,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SearchQuery.es6.js",
      "name": "./src/collections/SearchQuery.es6.js",
      "index": 67,
      "index2": 66,
      "size": 5652,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./collections/SearchQuery",
          "loc": "140:0-52"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport last from 'lodash/last';\n\nimport Listing from './Listing';\nimport SearchEndpoint from '../apis/SearchEndpoint';\nimport { withQueryAndResult } from '../apiBase/APIResponsePaging';\nimport { POST, SUBREDDIT } from '../models2/thingTypes';\nvar RESERVED_FOR_SUBBREDITS = 3; // api reserves 3 slots for subreddit results\n\nvar SearchQuery = function (_Listing) {\n  _inherits(SearchQuery, _Listing);\n\n  function SearchQuery() {\n    _classCallCheck(this, SearchQuery);\n\n    return _possibleConstructorReturn(this, (SearchQuery.__proto__ || Object.getPrototypeOf(SearchQuery)).apply(this, arguments));\n  }\n\n  _createClass(SearchQuery, [{\n    key: 'expectedNumberOfPosts',\n    value: function expectedNumberOfPosts(query) {\n      return (query.limit || 25) - RESERVED_FOR_SUBBREDITS;\n    }\n  }, {\n    key: 'afterId',\n    get: function get() {\n      var _this2 = this;\n\n      return withQueryAndResult(this.apiResponse, function (query, results) {\n        var limit = _this2.expectedNumberOfPosts(query);\n        var posts = results.filter(function (record) {\n          return record.type === POST;\n        });\n        return posts.length >= limit ? last(posts).uuid : null;\n      });\n    }\n  }, {\n    key: 'posts',\n    get: function get() {\n      return this.apiResponse.results.filter(function (record) {\n        return record.type === POST;\n      }).map(this.apiResponse.getModelFromRecord);\n    }\n  }, {\n    key: 'subreddits',\n    get: function get() {\n      return this.apiResponse.results.filter(function (record) {\n        return record.type === SUBREDDIT;\n      }).map(this.apiResponse.getModelFromRecord);\n    }\n  }], [{\n    key: 'fetch',\n    value: function fetch(apiOptions, queryOrOptions) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (typeof queryOrOptions === 'string') {\n        options.q = queryOrOptions;\n      } else {\n        options = _extends({}, options, queryOrOptions);\n      }\n\n      return _get(SearchQuery.__proto__ || Object.getPrototypeOf(SearchQuery), 'fetch', this).call(this, apiOptions, options);\n    }\n  }, {\n    key: 'fetchPostsAndComments',\n    value: function fetchPostsAndComments(apiOptions, queryOrOptions) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      options = _extends({}, options, {\n        include_facets: 'off',\n        type: ['sr', 'link'],\n        sort: 'relevance',\n        t: 'all'\n      });\n\n      return this.fetch(apiOptions, queryOrOptions, options);\n    }\n  }, {\n    key: 'fetchPosts',\n    value: function fetchPosts(apiOptions, queryOrOptions) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      options = _extends({}, options, {\n        include_facets: 'off',\n        type: ['link'],\n        sort: 'relevance',\n        t: 'all'\n      });\n\n      return this.fetch(apiOptions, queryOrOptions, options);\n    }\n  }, {\n    key: 'fetchSubreddits',\n    value: function fetchSubreddits(apiOptions, queryOrOptions) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      options = _extends({}, options, {\n        include_facets: 'off',\n        type: ['sr'],\n        sort: 'relevance',\n        t: 'all'\n      });\n\n      return this.fetch(apiOptions, queryOrOptions, options);\n    }\n  }]);\n\n  return SearchQuery;\n}(Listing);\n\nSearchQuery.endpoint = SearchEndpoint;\nexport default SearchQuery;"
    },
    {
      "id": 56,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/collections/SubredditLists.js",
      "name": "./src/collections/SubredditLists.js",
      "index": 61,
      "index2": 61,
      "size": 5840,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "issuerId": 67,
      "issuerName": "./src/index.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 67,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
          "module": "./src/index.es6.js",
          "moduleName": "./src/index.es6.js",
          "type": "harmony import",
          "userRequest": "./collections/SubredditLists",
          "loc": "134:0-114"
        }
      ],
      "usedExports": [
        "ContributingSubreddits",
        "ModeratingSubreddits",
        "SubscribedSubreddits"
      ],
      "providedExports": [
        "SubredditList",
        "SubscribedSubreddits",
        "ModeratingSubreddits",
        "ContributingSubreddits"
      ],
      "source": "var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport { fetchAll, afterResponse, beforeResponse } from '../apiBase/APIResponsePaging';\nimport Listing from './Listing';\nimport SubredditEndpoint from '../apis/SubredditEndpoint';\n\nexport var SubredditList = function (_Listing) {\n  _inherits(SubredditList, _Listing);\n\n  function SubredditList() {\n    _classCallCheck(this, SubredditList);\n\n    return _possibleConstructorReturn(this, (SubredditList.__proto__ || Object.getPrototypeOf(SubredditList)).apply(this, arguments));\n  }\n\n  _createClass(SubredditList, [{\n    key: 'subreddits',\n    get: function get() {\n      return this.apiResponse.results.map(this.apiResponse.getModelFromRecord);\n    }\n  }], [{\n    key: 'baseOptions',\n    value: function baseOptions(apiOptions) {\n      return {\n        sort: this.sortFromOptions(apiOptions) || this.sort,\n        limit: this.limit,\n        sr_detail: true\n      };\n    }\n  }, {\n    key: 'fetch',\n    value: function () {\n      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(apiOptions) {\n        var all = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var get, allMergedSubreddits, firstPage;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!all) {\n                  _context.next = 6;\n                  break;\n                }\n\n                get = SubredditEndpoint.get;\n                _context.next = 4;\n                return fetchAll(get, apiOptions, this.baseOptions(apiOptions));\n\n              case 4:\n                allMergedSubreddits = _context.sent;\n                return _context.abrupt('return', new this(allMergedSubreddits));\n\n              case 6:\n                _context.next = 8;\n                return this.getResponse(apiOptions);\n\n              case 8:\n                firstPage = _context.sent;\n                return _context.abrupt('return', new this(firstPage));\n\n              case 10:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }]);\n\n  return SubredditList;\n}(Listing);\n\nSubredditList.sortFromOptions = function () {};\n\nSubredditList.sort = '';\nSubredditList.limit = 100;\nSubredditList.endpoint = SubredditEndpoint;\nexport var SubscribedSubreddits = function (_SubredditList) {\n  _inherits(SubscribedSubreddits, _SubredditList);\n\n  function SubscribedSubreddits() {\n    _classCallCheck(this, SubscribedSubreddits);\n\n    return _possibleConstructorReturn(this, (SubscribedSubreddits.__proto__ || Object.getPrototypeOf(SubscribedSubreddits)).apply(this, arguments));\n  }\n\n  return SubscribedSubreddits;\n}(SubredditList);\n\nSubscribedSubreddits.sortFromOptions = function (apiOptions) {\n  if (apiOptions.token) {\n    return 'mine/subscriber';\n  }\n\n  return 'default';\n};\n\nexport var ModeratingSubreddits = function (_SubredditList2) {\n  _inherits(ModeratingSubreddits, _SubredditList2);\n\n  function ModeratingSubreddits() {\n    _classCallCheck(this, ModeratingSubreddits);\n\n    return _possibleConstructorReturn(this, (ModeratingSubreddits.__proto__ || Object.getPrototypeOf(ModeratingSubreddits)).apply(this, arguments));\n  }\n\n  return ModeratingSubreddits;\n}(SubredditList);\n\nModeratingSubreddits.sort = 'mine/moderator';\nexport var ContributingSubreddits = function (_SubredditList3) {\n  _inherits(ContributingSubreddits, _SubredditList3);\n\n  function ContributingSubreddits() {\n    _classCallCheck(this, ContributingSubreddits);\n\n    return _possibleConstructorReturn(this, (ContributingSubreddits.__proto__ || Object.getPrototypeOf(ContributingSubreddits)).apply(this, arguments));\n  }\n\n  return ContributingSubreddits;\n}(SubredditList);\nContributingSubreddits.sort = 'mine/contributor';"
    },
    {
      "id": 57,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/Events.es6.js",
      "name": "./src/apiBase/Events.es6.js",
      "index": 3,
      "index2": 1,
      "size": 102,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
      "issuerId": 2,
      "issuerName": "./src/apiBase/APIRequestUtils.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 2,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apiBase/APIRequestUtils.es6.js",
          "module": "./src/apiBase/APIRequestUtils.es6.js",
          "moduleName": "./src/apiBase/APIRequestUtils.es6.js",
          "type": "harmony import",
          "userRequest": "./Events",
          "loc": "5:0-30"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "export default {\n  request: 'request',\n  response: 'response',\n  error: 'error',\n  result: 'result'\n};"
    },
    {
      "id": 58,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/VoteEndpoint.es6.js",
      "name": "./src/apis/VoteEndpoint.es6.js",
      "index": 28,
      "index2": 24,
      "size": 725,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/votable.js",
      "issuerId": 37,
      "issuerName": "./src/models2/mixins/votable.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 37,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mixins/votable.js",
          "module": "./src/models2/mixins/votable.js",
          "moduleName": "./src/models2/mixins/votable.js",
          "type": "harmony import",
          "userRequest": "../../apis/VoteEndpoint",
          "loc": "4:0-44"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "import { runForm, validateData } from '../apiBase/APIRequestUtils';\n\nvar path = 'api/vote';\n\nvar validator = function validator(data) {\n  return !!data.thingId && typeof data.direction === 'number';\n};\n\nvar post = function post(apiOptions, data) {\n  validateData(data, 'post', 'votes', validator);\n\n  var postData = {\n    id: data.thingId,\n    dir: data.direction,\n    api_type: 'json'\n  };\n\n  return runForm(apiOptions, 'post', path, postData);\n};\n\nvar del = function del(apiOptions, data) {\n  validateData(data, 'del', 'votes', validator);\n\n  var postData = {\n    id: data.thingId,\n    dir: 0,\n    api_type: 'json'\n  };\n\n  return runForm(apiOptions, 'post', path, postData);\n};\n\nexport default {\n  post: post,\n  del: del\n};"
    },
    {
      "id": 59,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/lib/commentTreeUtils.es6.js",
      "name": "./src/lib/commentTreeUtils.es6.js",
      "index": 31,
      "index2": 30,
      "size": 2337,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
      "issuerId": 16,
      "issuerName": "./src/apis/CommentsEndpoint.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 16,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/CommentsEndpoint.es6.js",
          "module": "./src/apis/CommentsEndpoint.es6.js",
          "moduleName": "./src/apis/CommentsEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../lib/commentTreeUtils",
          "loc": "10:0-101"
        }
      ],
      "usedExports": [
        "parseCommentData",
        "treeifyComments",
        "normalizeCommentReplies"
      ],
      "providedExports": [
        "treeifyComments",
        "parseCommentData",
        "normalizeCommentReplies"
      ],
      "source": "import { COMMENT_LOAD_MORE } from '../models2/thingTypes';\n\n// All of these function rely on mutation, either for building the tree,\n// or for performance reasons (things like building dictionaryies), use/edit carefully\n\nexport function treeifyComments() {\n  var comments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var commentDict = {};\n  comments.forEach(function (c) {\n    commentDict[c.name] = c;\n  });\n\n  var topLevelComments = [];\n\n  // build the tree. this relies on references, so mutability is important here\n  comments.forEach(function (c) {\n    var parent = commentDict[c.parent_id];\n    if (!parent) {\n      topLevelComments.push(c);\n      return;\n    }\n\n    if (!parent.replies) {\n      parent.replies = [];\n    }\n    parent.replies.push(c);\n  });\n\n  return topLevelComments;\n}\n\nexport function parseCommentData(data) {\n  if (data.kind === 'more') {\n    return {\n      type: COMMENT_LOAD_MORE,\n      children: data.data.children,\n      count: data.data.count,\n      parent_id: data.data.parent_id\n    };\n  }\n\n  var comment = data.data;\n\n  if (comment.replies) {\n    comment.replies = comment.replies.data.children.map(parseCommentData);\n  } else {\n    comment.replies = [];\n  }\n\n  return comment;\n}\n\nvar COMMENT_DEFAULTS = {\n  numReplies: 0,\n  loadMoreIds: [],\n  loadMore: false\n};\n\nexport function normalizeCommentReplies(comments, isTopLevel, visitComment) {\n  return comments.map(function (comment) {\n    if (comment.type === COMMENT_LOAD_MORE) {\n      return;\n    }\n\n    // assign some helpful keys and their defaults to the comment\n    Object.assign(comment, COMMENT_DEFAULTS);\n\n    // Filter out if a comment is a \"load more\" type, set a property on the\n    // parent comment, and then nuke the fake \"reply\"\n    var loadMoreIdx = comment.replies.findIndex(function (c) {\n      return c.type === COMMENT_LOAD_MORE;\n    });\n    if (loadMoreIdx > -1) {\n      var loadMoreStub = comment.replies[loadMoreIdx];\n\n      comment.numReplies = loadMoreStub.count;\n      comment.loadMoreIds = loadMoreStub.children;\n      comment.loadMore = true;\n      comment.replies = comment.replies.slice(0, loadMoreIdx);\n    }\n\n    comment.replies = normalizeCommentReplies(comment.replies, false, visitComment);\n\n    return visitComment(comment, isTopLevel);\n  }).filter(function (c) {\n    return c;\n  });\n}"
    },
    {
      "id": 60,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/lib/isThingID.es6.js",
      "name": "./src/lib/isThingID.es6.js",
      "index": 21,
      "index2": 17,
      "size": 135,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
      "issuerId": 4,
      "issuerName": "./src/models2/RedditModel.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 4,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
          "module": "./src/models2/RedditModel.es6.js",
          "moduleName": "./src/models2/RedditModel.es6.js",
          "type": "harmony import",
          "userRequest": "../lib/isThingID",
          "loc": "17:0-41"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "var THING_ID_REGEX = new RegExp('^t\\\\d_[0-9a-z]+', 'i');\n\nexport default function isThingID(val) {\n  return THING_ID_REGEX.test(val);\n}"
    },
    {
      "id": 61,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/lib/markdown.es6.js",
      "name": "./src/lib/markdown.es6.js",
      "index": 22,
      "index2": 18,
      "size": 136,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
      "issuerId": 4,
      "issuerName": "./src/models2/RedditModel.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 4,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
          "module": "./src/models2/RedditModel.es6.js",
          "moduleName": "./src/models2/RedditModel.es6.js",
          "type": "harmony import",
          "userRequest": "../lib/markdown",
          "loc": "18:0-38"
        }
      ],
      "usedExports": false,
      "providedExports": [
        "default"
      ],
      "source": "export default function process(text) {\n  if (!text) return text;\n\n  text = text.replace(/<a/g, '<a target=\"_blank\"');\n\n  return text;\n}"
    },
    {
      "id": 62,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/lib/unredditifyLink.es6.js",
      "name": "./src/lib/unredditifyLink.es6.js",
      "index": 23,
      "index2": 19,
      "size": 153,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
      "issuerId": 4,
      "issuerName": "./src/models2/RedditModel.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 4,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
          "module": "./src/models2/RedditModel.es6.js",
          "moduleName": "./src/models2/RedditModel.es6.js",
          "type": "harmony import",
          "userRequest": "../lib/unredditifyLink",
          "loc": "19:0-53"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "export default function unredditifyLink(url) {\n  if (!url) {\n    return;\n  }\n  return url.replace(/^https?:\\/\\/(?:np\\.)?(?:www\\.)?reddit\\.com\\//, '/');\n}"
    },
    {
      "id": 63,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/MessageModel.es6.js",
      "name": "./src/models2/MessageModel.es6.js",
      "index": 58,
      "index2": 56,
      "size": 2050,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/MessagesEndpoint.es6.js",
      "issuerId": 41,
      "issuerName": "./src/apis/MessagesEndpoint.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 41,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/MessagesEndpoint.es6.js",
          "module": "./src/apis/MessagesEndpoint.es6.js",
          "moduleName": "./src/apis/MessagesEndpoint.es6.js",
          "type": "harmony import",
          "userRequest": "../models2/MessageModel",
          "loc": "10:0-46"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport RedditModel from './RedditModel';\n\nvar T = RedditModel.Types;\n\nvar Message = function (_RedditModel) {\n  _inherits(Message, _RedditModel);\n\n  function Message() {\n    _classCallCheck(this, Message);\n\n    return _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).apply(this, arguments));\n  }\n\n  return Message;\n}(RedditModel);\n\nMessage.PROPERTIES = {\n  id: T.string,\n  author: T.string,\n  name: T.string,\n  bodyHTML: T.string,\n  isComment: T.bool,\n  firstMessage: T.string,\n  firstMessageName: T.string,\n  createdUTC: T.number,\n  subreddit: T.string,\n  parentId: T.string,\n  replies: T.arrayOf(T.string),\n  distinguished: T.string,\n  subject: T.string,\n\n  // derived\n  cleanPermalink: T.link\n};\nMessage.API_ALIASES = {\n  was_comment: 'isComment',\n  first_message: 'firstMessage',\n  first_message_name: 'firstMessageName',\n  created_utc: 'createdUTC',\n  body_html: 'bodyHTML',\n  parent_id: 'parentId'\n};\nMessage.DERIVED_PROPERTIES = {\n  cleanPermalink: function cleanPermalink(data) {\n    var id = data.id;\n\n    if (!id) {\n      return null;\n    }\n    return '/message/messages/' + id;\n  }\n};\nexport default Message;"
    },
    {
      "id": 64,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mockgenerators/mockHTML.es6.js",
      "name": "./src/models2/mockgenerators/mockHTML.es6.js",
      "index": 24,
      "index2": 20,
      "size": 272,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
      "issuerId": 4,
      "issuerName": "./src/models2/RedditModel.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 4,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
          "module": "./src/models2/RedditModel.es6.js",
          "moduleName": "./src/models2/RedditModel.es6.js",
          "type": "harmony import",
          "userRequest": "./mockgenerators/mockHTML",
          "loc": "21:0-49"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "export default function mockHTML() {\n  // more randomization here at somepoint\n  /* eslint-disable max-len */\n  return '<h1>This is a header or something</h1><sup><sup>TM</sup></sup><a href=\"https://www.reddit.com/r/reactjs\">reactjs subreddit</a>';\n  /* eslint-enable */\n}"
    },
    {
      "id": 65,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/mockgenerators/mockLink.es6.js",
      "name": "./src/models2/mockgenerators/mockLink.es6.js",
      "index": 25,
      "index2": 21,
      "size": 267,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
      "issuerId": 4,
      "issuerName": "./src/models2/RedditModel.es6.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 4,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/models2/RedditModel.es6.js",
          "module": "./src/models2/RedditModel.es6.js",
          "moduleName": "./src/models2/RedditModel.es6.js",
          "type": "harmony import",
          "userRequest": "./mockgenerators/mockLink",
          "loc": "22:0-49"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": [
        "default"
      ],
      "source": "export default function mockLink() {\n  var seed = Math.toFixed(Math.random() * 10);\n  if (seed <= 3) {\n    return 'https://www.reddit.com/r/theonion';\n  }\n  if (seed <= 6) {\n    return 'https://www.reddit.com/r/nothteonion';\n  }\n  return 'https://www.theonion.com';\n}"
    },
    {
      "id": 66,
      "identifier": "external \"some\"",
      "name": "external \"some\"",
      "index": 33,
      "index2": 31,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PostsEndpoint.js",
      "issuerId": 24,
      "issuerName": "./src/apis/PostsEndpoint.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/apis/PostsEndpoint.js",
          "module": "./src/apis/PostsEndpoint.js",
          "moduleName": "./src/apis/PostsEndpoint.js",
          "type": "harmony import",
          "userRequest": "lodash/some",
          "loc": "3:0-31"
        }
      ],
      "usedExports": [
        "default"
      ],
      "providedExports": null
    },
    {
      "id": 67,
      "identifier": "/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-loader/index.js?{\"presets\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-es2015-native-modules/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-stage-2/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-preset-react/lib/index.js\"],\"plugins\":[\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-class-properties/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-constant-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-transform-react-inline-elements/lib/index.js\",\"/Users/ryan.schwers/src/reddit/r/apiclient/node_modules/babel-plugin-lodash/lib/index.js\"]}!/Users/ryan.schwers/src/reddit/r/apiclient/src/index.es6.js",
      "name": "./src/index.es6.js",
      "index": 0,
      "index2": 67,
      "size": 7331,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [],
      "usedExports": true,
      "providedExports": [
        "APIResponses",
        "APIResponsePaging",
        "endpoints",
        "errors",
        "models",
        "collections",
        "__esModule",
        "default",
        "requestUtils",
        "optionsWithAuth"
      ],
      "source": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport { makeOptions, rawSend } from './apiBase/APIRequestUtils';\n\n// import captcha from './apis/captcha';\n// import modListing from './apis/modListing';\n// import multis from './apis/multis';\n// import multiSubscriptions from './apis/multiSubscriptions';\n// import reports from './apis/reports';\n// import rules from './apis/rules';\n// import stylesheets from './apis/stylesheets';\n// import subredditRelationships from './apis/subredditRelationships';\n// import trophies from './apis/trophies';\n// import votes from './apis/votes';\n// import wiki from './apis/wiki';\n\n// CommentsEndpoint must be imported first followed by PostsEndpoint.\n// This is because the PostsEndpoint requires the PostModel which uses the replyable\n// mixin which requires the CommentsEndpoint. If they're imported out of order\n// endpoints that rely on both Comments and Posts will break in suspicous ways :(\nimport CommentsEndpoint from './apis/CommentsEndpoint';\nimport PostsEndpoint from './apis/PostsEndpoint';\n\nimport AccountsEndpoint from './apis/accounts';\nimport ActivitiesEndpoint from './apis/activities';\nimport EditUserTextEndpoint from './apis/EditUserTextEndpoint';\nimport HiddenEndpoint from './apis/HiddenEndpoint';\nimport Modtools from './apis/modTools';\nimport PreferencesEndpoint from './apis/PreferencesEndpoint';\nimport RecommendedSubreddits from './apis/RecommendedSubreddits';\nimport SavedEndpoint from './apis/SavedEndpoint';\nimport SearchEndpoint from './apis/SearchEndpoint';\nimport SimilarPosts from './apis/SimilarPosts';\nimport SubredditAutocomplete from './apis/SubredditAutocomplete';\nimport subscriptions from './apis/subscriptions';\nimport SubredditEndpoint from './apis/SubredditEndpoint';\nimport SubredditsByPost from './apis/SubredditsByPost';\nimport SubredditsToPostsByPost from './apis/SubredditsToPostsByPost';\nimport WikisEndpoint from './apis/wikis';\nimport MessagesEndpoint from './apis/MessagesEndpoint';\n\nimport { APIResponse, MergedApiReponse } from './apiBase/APIResponse';\nimport Model from './apiBase/Model';\nimport Record from './apiBase/Record';\nimport * as ModelTypes from './models2/thingTypes';\nimport apiRequest from './apiBase/apiRequest';\n\nimport { withQueryAndResult, afterResponse, beforeResponse, fetchAll } from './apiBase/APIResponsePaging';\n\nexport var APIResponses = {\n  APIResponse: APIResponse,\n  MergedApiReponse: MergedApiReponse\n};\n\nexport var APIResponsePaging = {\n  withQueryAndResult: withQueryAndResult,\n  afterResponse: afterResponse,\n  beforeResponse: beforeResponse,\n  fetchAll: fetchAll\n};\n\nexport var endpoints = {\n  // captcha,\n  // modListing,\n  // multis,\n  // multiSubscriptions,\n  // reports,\n  // rules,\n  // stylesheets,\n  // subredditRelationships,\n  // subscriptions,\n  // trophies,\n  // votes,\n  // wiki,\n  AccountsEndpoint: AccountsEndpoint,\n  ActivitiesEndpoint: ActivitiesEndpoint,\n  EditUserTextEndpoint: EditUserTextEndpoint,\n  CommentsEndpoint: CommentsEndpoint,\n  HiddenEndpoint: HiddenEndpoint,\n  Modtools: Modtools,\n  PostsEndpoint: PostsEndpoint,\n  PreferencesEndpoint: PreferencesEndpoint,\n  RecommendedSubreddits: RecommendedSubreddits,\n  SavedEndpoint: SavedEndpoint,\n  SearchEndpoint: SearchEndpoint,\n  SimilarPosts: SimilarPosts,\n  subscriptions: subscriptions,\n  SubredditAutocomplete: SubredditAutocomplete,\n  SubredditsByPost: SubredditsByPost,\n  SubredditsToPostsByPost: SubredditsToPostsByPost,\n  SubredditEndpoint: SubredditEndpoint,\n  WikisEndpoint: WikisEndpoint,\n  MessagesEndpoint: MessagesEndpoint\n};\n\nimport NoModelError from './apiBase/errors/NoModelError';\nimport ResponseError from './apiBase/errors/ResponseError';\nimport { DisconnectedError } from './apiBase/errors/ResponseError';\nimport ValidationError from './apiBase/errors/ValidationError';\nimport BadCaptchaError from './apiBase/errors/BadCaptchaError';\nimport NotImplementedError from './apiBase/errors/NotImplementedError';\n\nexport var errors = {\n  NoModelError: NoModelError,\n  ValidationError: ValidationError,\n  ResponseError: ResponseError,\n  DisconnectedError: DisconnectedError,\n  NotImplementedError: NotImplementedError,\n  BadCaptchaError: BadCaptchaError\n};\n\n// import Award from './models/award';\n// import Base from './models/base';\n// import Block from './models/block';\n// import BlockedUser from './models/BlockedUser';\n// import Message from './models/message';\n// import PromoCampaign from './models/promocampaign';\n// import Subscription from './models/subscription';\n// import Vote from './models/vote';\n// import Report from './models/report';\n// import WikiPage from './models/wikiPage';\n// import WikiRevision from './models/wikiRevision';\n// import WikiPageListing from './models/wikiPageListing';\n// import WikiPageSettings from './models/wikiPageSettings';\n\n// new models\nimport Account from './models2/Account';\nimport CommentModel from './models2/CommentModel';\nimport PostModel from './models2/PostModel';\nimport Preferences from './models2/Preferences';\nimport Subreddit from './models2/Subreddit';\nimport Wiki from './models2/Wiki';\n\nimport { SubscribedSubreddits, ModeratingSubreddits, ContributingSubreddits } from './collections/SubredditLists';\n\nimport CommentsPage from './collections/CommentsPage';\nimport HiddenPostsAndComments from './collections/HiddenPostsAndComments';\nimport PostsFromSubreddit from './collections/PostsFromSubreddit';\nimport SavedPostsAndComments from './collections/SavedPostsAndComments';\nimport SearchQuery from './collections/SearchQuery';\n\nexport var models = {\n  // Award,\n  // Base,\n  // Block,\n  // BlockedUser,\n  // Message,\n  // PromoCampaign,\n  // Subreddit,\n  // Subscription,\n  // Vote,\n  // Report,\n  // WikiPage,\n  // WikiRevision,\n  // WikiPageListing,\n  // WikiPageSettings,\n  Model: Model,\n  ModelTypes: ModelTypes,\n  Record: Record,\n\n  Account: Account,\n  CommentModel: CommentModel,\n  PostModel: PostModel,\n  Preferences: Preferences,\n  Subreddit: Subreddit,\n\n  Wiki: Wiki\n};\n\nexport var collections = {\n  CommentsPage: CommentsPage,\n  ContributingSubreddits: ContributingSubreddits,\n  HiddenPostsAndComments: HiddenPostsAndComments,\n  ModeratingSubreddits: ModeratingSubreddits,\n  PostsFromSubreddit: PostsFromSubreddit,\n  SavedPostsAndComments: SavedPostsAndComments,\n  SearchQuery: SearchQuery,\n  SubscribedSubreddits: SubscribedSubreddits\n};\n\nvar DEFAULT_API_ORIGIN = 'https://www.reddit.com';\nvar AUTHED_API_ORIGIN = 'https://oauth.reddit.com';\n\n// Webpack 2 has an export bug where a library's export object does not state\n// that it is an es6 module. Without this tag defined on the exports object,\n// Webpack does not import the library correctly.\nexport var __esModule = true;\n\nvar DefaultOptions = {\n  origin: DEFAULT_API_ORIGIN,\n  userAgent: 'snoodev3',\n  appName: 'snoodev3',\n  env: process.env.NODE_ENV || 'dev'\n};\n\nexport default makeOptions(DefaultOptions);\n\nexport var requestUtils = {\n  rawSend: rawSend,\n  apiRequest: apiRequest\n};\n\nexport var optionsWithAuth = function optionsWithAuth(token) {\n  return _extends({}, DefaultOptions, {\n    token: token,\n    origin: token ? AUTHED_API_ORIGIN : DEFAULT_API_ORIGIN\n  });\n};"
    }
  ],
  "filteredModules": 0,
  "children": []
}